{"ast":null,"code":"function pipe(source) {\n  var args = arguments;\n  var len = args.length;\n  var x = source;\n\n  for (var i = 1; i < len; i++) {\n    x = args[i](x);\n  }\n\n  return x;\n}\n\nfunction __(tag, block) {\n  block.tag = tag;\n  return block;\n}\n\nfunction caml_array_sub(x, offset, len) {\n  var result = new Array(len);\n  var j = 0;\n  var i = offset;\n\n  while (j < len) {\n    result[j] = x[i];\n    j = j + 1 | 0;\n    i = i + 1 | 0;\n  }\n\n  return result;\n}\n\nfunction app(_f, _args) {\n  while (1) {\n    var args = _args;\n    var f = _f;\n    var init_arity = f.length;\n    var arity = 0 === init_arity ? 1 : init_arity;\n    var d = arity - args.length | 0;\n\n    if (0 === d) {\n      return f.apply(null, args);\n    } else if (d < 0) {\n      _args = caml_array_sub(args, arity, 0 | -d);\n      _f = f.apply(null, caml_array_sub(args, 0, arity));\n      continue;\n    } else {\n      return function (f, args) {\n        return function (x) {\n          return app(f, args.concat([x]));\n        };\n      }(f, args);\n    }\n  }\n}\n\nfunction _1(o, a0) {\n  var arity = o.length;\n\n  if (1 === arity) {\n    return o(a0);\n  } else {\n    return function curry_1(o, a0, arity) {\n      switch (arity) {\n        case 1:\n          return o(a0);\n\n        case 2:\n          return function (param) {\n            return o(a0, param);\n          };\n\n        case 3:\n          return function (param, param$1) {\n            return o(a0, param, param$1);\n          };\n\n        case 4:\n          return function (param, param$1, param$2) {\n            return o(a0, param, param$1, param$2);\n          };\n\n        case 5:\n          return function (param, param$1, param$2, param$3) {\n            return o(a0, param, param$1, param$2, param$3);\n          };\n\n        case 6:\n          return function (param, param$1, param$2, param$3, param$4) {\n            return o(a0, param, param$1, param$2, param$3, param$4);\n          };\n\n        case 7:\n          return function (param, param$1, param$2, param$3, param$4, param$5) {\n            return o(a0, param, param$1, param$2, param$3, param$4, param$5);\n          };\n\n        default:\n          return app(o, [a0]);\n      }\n    }(o, a0, arity);\n  }\n}\n\nfunction _3(o, a0, a1, a2) {\n  var arity = o.length;\n\n  if (3 === arity) {\n    return o(a0, a1, a2);\n  } else {\n    return function curry_3(o, a0, a1, a2, arity) {\n      switch (arity) {\n        case 1:\n          return app(o(a0), [a1, a2]);\n\n        case 2:\n          return app(o(a0, a1), [a2]);\n\n        case 3:\n          return o(a0, a1, a2);\n\n        case 4:\n          return function (param) {\n            return o(a0, a1, a2, param);\n          };\n\n        case 5:\n          return function (param, param$1) {\n            return o(a0, a1, a2, param, param$1);\n          };\n\n        case 6:\n          return function (param, param$1, param$2) {\n            return o(a0, a1, a2, param, param$1, param$2);\n          };\n\n        case 7:\n          return function (param, param$1, param$2, param$3) {\n            return o(a0, a1, a2, param, param$1, param$2, param$3);\n          };\n\n        default:\n          return app(o, [a0, a1, a2]);\n      }\n    }(o, a0, a1, a2, arity);\n  }\n}\n\nvar undefinedHeader = [];\n\nfunction some(x) {\n  if (void 0 === x) {\n    var block = [undefinedHeader, 0];\n    block.tag = 256;\n    return block;\n  } else if (null !== x && x[0] === undefinedHeader) {\n    var block$1 = [undefinedHeader, x[1] + 1 | 0];\n    block$1.tag = 256;\n    return block$1;\n  } else {\n    return x;\n  }\n}\n\nfunction valFromOption(x) {\n  if (null !== x && x[0] === undefinedHeader) {\n    var depth = x[1];\n\n    if (0 === depth) {\n      return;\n    } else {\n      return [undefinedHeader, depth - 1 | 0];\n    }\n  } else {\n    return x;\n  }\n}\n\nfunction talkbackPlaceholder(param) {\n  return 0;\n}\n\nfunction captureTalkback(source, sinkWithTalkback) {\n  var talkback = [talkbackPlaceholder];\n  return _1(source, function (signal) {\n    if ('number' != typeof signal) {\n      if (!signal.tag) {\n        talkback[0] = signal[0];\n      }\n    }\n\n    return sinkWithTalkback(signal, talkback[0]);\n  });\n}\n\nfunction makeTrampoline(sink, f) {\n  var state = [!1, !1, !1];\n  return sink(__(0, [function (signal) {\n    var match = state[1];\n\n    if (signal) {\n      state[0] = !0;\n      return 0;\n    } else if (match) {\n      state[2] = !0;\n      return 0;\n    } else {\n      state[2] = !0;\n      state[1] = !0;\n\n      while (state[2] && !state[0]) {\n        var match$1 = f();\n\n        if (void 0 !== match$1) {\n          state[2] = !1;\n          sink(__(1, [valFromOption(match$1)]));\n        } else {\n          state[0] = !0;\n          sink(0);\n        }\n      }\n\n      state[1] = !1;\n      return 0;\n    }\n  }]));\n}\n\nvar observableSymbol = 'function' == typeof Symbol ? Symbol.observable || (Symbol.observable = Symbol('observable')) : '@@observable';\n\nfunction takeLast(max) {\n  return function (source) {\n    return function (sink) {\n      var queue = new Array();\n      return captureTalkback(source, function (signal, talkback) {\n        if ('number' == typeof signal) {\n          return makeTrampoline(sink, function () {\n            return queue.shift();\n          });\n        } else if (signal.tag) {\n          if (queue.length >= max && max > 0) {\n            queue.shift();\n          }\n\n          queue.push(signal[0]);\n          return talkback(0);\n        } else {\n          return talkback(0);\n        }\n      });\n    };\n  };\n}\n\nfunction fromListener(addListener, removeListener) {\n  return function (sink) {\n    var handler = function handler($$event) {\n      return sink(__(1, [$$event]));\n    };\n\n    sink(__(0, [function (signal) {\n      if (signal) {\n        return _1(removeListener, handler);\n      } else {\n        return 0;\n      }\n    }]));\n    return _1(addListener, handler);\n  };\n}\n\nvar toPromise$1 = function toPromise(source) {\n  return new Promise(function (resolve, param) {\n    return _1(takeLast(1)(source), function (signal) {\n      if ('number' == typeof signal) {\n        return 0;\n      } else if (signal.tag) {\n        return resolve(signal[0]);\n      } else {\n        return signal[0](0);\n      }\n    });\n  });\n};\n\nfunction subscribe(f) {\n  return function (source) {\n    var state = [talkbackPlaceholder, !1];\n\n    _1(source, function (signal) {\n      if ('number' == typeof signal) {\n        state[1] = !0;\n        return 0;\n      } else if (signal.tag) {\n        if (state[1]) {\n          return 0;\n        } else {\n          f(signal[0]);\n          return state[0](0);\n        }\n      } else {\n        var x = signal[0];\n        state[0] = x;\n        return x(0);\n      }\n    });\n\n    return [function (param) {\n      if (state[1]) {\n        return 0;\n      } else {\n        state[1] = !0;\n        return state[0](1);\n      }\n    }];\n  };\n}\n\nfunction fromArray(arr) {\n  return function (sink) {\n    var size = arr.length;\n    var index = [0];\n    return makeTrampoline(sink, function () {\n      if (index[0] < size) {\n        var x = arr[index[0]];\n        index[0] = index[0] + 1 | 0;\n        return some(x);\n      }\n    });\n  };\n}\n\nfunction onPush(f) {\n  return function (source) {\n    return function (sink) {\n      return _1(source, function (signal) {\n        if ('number' != typeof signal) {\n          if (signal.tag) {\n            f(signal[0]);\n          }\n        }\n\n        return sink(signal);\n      });\n    };\n  };\n}\n\nfunction mergeMap(f) {\n  return function (source) {\n    return function (sink) {\n      var state = [talkbackPlaceholder, new Array(), !1];\n\n      _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          if (state[2]) {\n            return 0;\n          } else {\n            state[2] = !0;\n\n            if (0 === state[1].length) {\n              return sink(0);\n            } else {\n              return 0;\n            }\n          }\n        } else if (signal.tag) {\n          if (state[2]) {\n            return 0;\n          } else {\n            innerSource = f(signal[0]), talkback = [talkbackPlaceholder], _1(innerSource, function (signal) {\n              if ('number' == typeof signal) {\n                state[1] = state[1].filter(function (x) {\n                  return x !== talkback[0];\n                });\n\n                if (state[2] && 0 === state[1].length) {\n                  return sink(0);\n                } else {\n                  return 0;\n                }\n              } else if (signal.tag) {\n                if (0 !== state[1].length) {\n                  sink(__(1, [signal[0]]));\n                  return talkback[0](0);\n                } else {\n                  return 0;\n                }\n              } else {\n                var tb = signal[0];\n                talkback[0] = tb;\n                state[1] = state[1].concat(tb);\n                return tb(0);\n              }\n            });\n            return state[0](0);\n          }\n        } else {\n          var tb = signal[0];\n          state[0] = tb;\n          return tb(0);\n        }\n\n        var innerSource, talkback;\n      });\n\n      return sink(__(0, [function (signal) {\n        if (signal) {\n          state[1].forEach(function (talkback) {\n            return talkback(1);\n          });\n\n          if (state[2]) {\n            return 0;\n          } else {\n            state[2] = !0;\n            state[0](1);\n            state[1].forEach(function (talkback) {\n              return talkback(1);\n            });\n            state[1] = new Array();\n            return 0;\n          }\n        } else if (state[2]) {\n          return 0;\n        } else {\n          state[1].forEach(function (talkback) {\n            return talkback(0);\n          });\n          return 0;\n        }\n      }]));\n    };\n  };\n}\n\nfunction mergeAll(source) {\n  return mergeMap(function (x) {\n    return x;\n  })(source);\n}\n\nfunction concatMap(f) {\n  return function (source) {\n    return function (sink) {\n      var state = [new Array(), talkbackPlaceholder, talkbackPlaceholder, !1, !1, !1];\n\n      var applyInnerSource = function applyInnerSource(innerSource) {\n        return _1(innerSource, function (signal) {\n          if ('number' == typeof signal) {\n            state[3] = !1;\n            state[2] = talkbackPlaceholder;\n            var match = state[0].shift();\n\n            if (void 0 !== match) {\n              return applyInnerSource(f(valFromOption(match)));\n            } else if (state[5]) {\n              return sink(0);\n            } else {\n              return 0;\n            }\n          } else if (signal.tag) {\n            if (state[4]) {\n              return 0;\n            } else {\n              sink(__(1, [signal[0]]));\n              return state[2](0);\n            }\n          } else {\n            var tb = signal[0];\n            state[3] = !0;\n            state[2] = tb;\n            return tb(0);\n          }\n        });\n      };\n\n      _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          if (state[5]) {\n            return 0;\n          } else {\n            state[5] = !0;\n\n            if (!state[3] && function isEmpty(q) {\n              return 0 === q.length;\n            }(state[0])) {\n              return sink(0);\n            } else {\n              return 0;\n            }\n          }\n        } else if (signal.tag) {\n          if (state[5]) {\n            return 0;\n          } else {\n            var x = signal[0];\n\n            if (state[3]) {\n              state[0].push(x);\n            } else {\n              applyInnerSource(f(x));\n            }\n\n            return state[1](0);\n          }\n        } else {\n          var tb = signal[0];\n          state[1] = tb;\n          return tb(0);\n        }\n      });\n\n      return sink(__(0, [function (signal) {\n        if (signal) {\n          state[2](1);\n\n          if (state[5]) {\n            return 0;\n          } else {\n            state[5] = !0;\n            state[4] = !0;\n            state[1](1);\n            state[2] = talkbackPlaceholder;\n            return 0;\n          }\n        } else if (state[5]) {\n          return 0;\n        } else {\n          return state[2](0);\n        }\n      }]));\n    };\n  };\n}\n\nfunction switchMap(f) {\n  return function (source) {\n    return function (sink) {\n      var state = [talkbackPlaceholder, talkbackPlaceholder, !1, !1, !1];\n\n      _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          if (state[4]) {\n            return 0;\n          } else {\n            state[4] = !0;\n\n            if (state[2]) {\n              return 0;\n            } else {\n              return sink(0);\n            }\n          }\n        } else if (signal.tag) {\n          if (state[4]) {\n            return 0;\n          } else {\n            if (state[2]) {\n              state[1](1);\n              state[1] = talkbackPlaceholder;\n            }\n\n            _1(f(signal[0]), function (signal) {\n              if ('number' == typeof signal) {\n                state[2] = !1;\n                state[1] = talkbackPlaceholder;\n\n                if (state[4]) {\n                  return sink(0);\n                } else {\n                  return 0;\n                }\n              } else if (signal.tag) {\n                if (state[3]) {\n                  return 0;\n                } else {\n                  sink(__(1, [signal[0]]));\n                  return state[1](0);\n                }\n              } else {\n                var tb = signal[0];\n                state[2] = !0;\n                state[1] = tb;\n                return tb(0);\n              }\n            });\n\n            return state[0](0);\n          }\n        } else {\n          var tb = signal[0];\n          state[0] = tb;\n          return tb(0);\n        }\n      });\n\n      return sink(__(0, [function (signal) {\n        if (signal) {\n          state[1](1);\n\n          if (state[4]) {\n            return 0;\n          } else {\n            state[4] = !0;\n            state[3] = !0;\n            state[0](1);\n            state[1] = talkbackPlaceholder;\n            return 0;\n          }\n        } else {\n          return state[1](0);\n        }\n      }]));\n    };\n  };\n}\n\nvar Types = 0;\nvar fromArray$2 = fromArray;\n\nvar fromList$2 = function fromList(ls) {\n  return function (sink) {\n    var value = [ls];\n    return makeTrampoline(sink, function () {\n      var match = value[0];\n\n      if (match) {\n        value[0] = match[1];\n        return some(match[0]);\n      }\n    });\n  };\n};\n\nvar fromValue$2 = function fromValue(x) {\n  return function (sink) {\n    var ended = [!1];\n    return sink(__(0, [function (signal) {\n      if (signal || ended[0]) {\n        return 0;\n      } else {\n        ended[0] = !0;\n        sink(__(1, [x]));\n        return sink(0);\n      }\n    }]));\n  };\n};\n\nvar make$2 = function make(f) {\n  return function (sink) {\n    var teardown = [function () {\n      return 0;\n    }];\n    sink(__(0, [function (signal) {\n      if (signal) {\n        return teardown[0]();\n      } else {\n        return 0;\n      }\n    }]));\n    teardown[0] = f([function (value) {\n      return sink(__(1, [value]));\n    }, function (param) {\n      return sink(0);\n    }]);\n    return 0;\n  };\n};\n\nvar makeSubject$2 = function makeSubject(param) {\n  var state = [new Array(), !1];\n  return [function (sink) {\n    state[0] = state[0].concat(sink);\n    return sink(__(0, [function (signal) {\n      if (1 === signal) {\n        state[0] = state[0].filter(function (x) {\n          return x !== sink;\n        });\n        return 0;\n      } else {\n        return 0;\n      }\n    }]));\n  }, function (value) {\n    if (state[1]) {\n      return 0;\n    } else {\n      state[0].forEach(function (sink) {\n        return sink(__(1, [value]));\n      });\n      return 0;\n    }\n  }, function (param) {\n    if (state[1]) {\n      return 0;\n    } else {\n      state[1] = !0;\n      state[0].forEach(function (sink) {\n        return sink(0);\n      });\n      return 0;\n    }\n  }];\n};\n\nvar empty$2 = function empty(sink) {\n  sink(__(0, [talkbackPlaceholder]));\n  return sink(0);\n};\n\nvar never$2 = function never(sink) {\n  return sink(__(0, [talkbackPlaceholder]));\n};\n\nvar buffer$2 = function buffer(notifier) {\n  return function (source) {\n    return function (sink) {\n      var state = [new Array(), talkbackPlaceholder, talkbackPlaceholder, !1];\n\n      _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          if (state[3]) {\n            return 0;\n          } else {\n            state[3] = !0;\n            state[2](1);\n            sink(__(1, [state[0]]));\n            return sink(0);\n          }\n        } else if (signal.tag) {\n          if (state[3]) {\n            return 0;\n          } else {\n            state[0].push(signal[0]);\n            return state[1](0);\n          }\n        } else {\n          state[1] = signal[0];\n          return _1(notifier, function (signal) {\n            if ('number' == typeof signal) {\n              if (state[3]) {\n                return 0;\n              } else {\n                state[3] = !0;\n                state[1](1);\n                sink(__(1, [state[0]]));\n                return sink(0);\n              }\n            } else if (signal.tag) {\n              if (state[3]) {\n                return 0;\n              } else {\n                sink(__(1, [state[0]]));\n                state[0] = new Array();\n                return state[2](0);\n              }\n            } else {\n              state[2] = signal[0];\n              return state[2](0);\n            }\n          });\n        }\n      });\n\n      return sink(__(0, [function (signal) {\n        if (state[3]) {\n          return 0;\n        } else if (signal) {\n          state[3] = !0;\n          state[1](1);\n          return state[2](1);\n        } else {\n          return state[1](0);\n        }\n      }]));\n    };\n  };\n};\n\nvar combine$2 = function combine(sourceA) {\n  return function (sourceB) {\n    return function (sink) {\n      var state = [talkbackPlaceholder, talkbackPlaceholder, void 0, void 0, !1, 0, !1];\n\n      _1(sourceA, function (signal) {\n        var match = state[3];\n\n        if ('number' == typeof signal) {\n          if (state[5] < 1) {\n            state[5] = state[5] + 1 | 0;\n            return 0;\n          } else if (state[6]) {\n            return 0;\n          } else {\n            state[6] = !0;\n            return sink(0);\n          }\n        } else if (signal.tag) {\n          var a = signal[0];\n\n          if (void 0 !== match) {\n            if (state[6]) {\n              return 0;\n            } else {\n              state[2] = some(a);\n              state[4] = !1;\n              return sink(__(1, [[a, valFromOption(match)]]));\n            }\n          } else {\n            state[2] = some(a);\n            state[4] = !1;\n            return 0;\n          }\n        } else {\n          state[0] = signal[0];\n          return 0;\n        }\n      });\n\n      _1(sourceB, function (signal) {\n        var match = state[2];\n\n        if ('number' == typeof signal) {\n          if (state[5] < 1) {\n            state[5] = state[5] + 1 | 0;\n            return 0;\n          } else if (state[6]) {\n            return 0;\n          } else {\n            state[6] = !0;\n            return sink(0);\n          }\n        } else if (signal.tag) {\n          var b = signal[0];\n\n          if (void 0 !== match) {\n            if (state[6]) {\n              return 0;\n            } else {\n              state[3] = some(b);\n              state[4] = !1;\n              return sink(__(1, [[valFromOption(match), b]]));\n            }\n          } else {\n            state[3] = some(b);\n            state[4] = !1;\n            return 0;\n          }\n        } else {\n          state[1] = signal[0];\n          return 0;\n        }\n      });\n\n      return sink(__(0, [function (signal) {\n        if (state[6]) {\n          return 0;\n        } else if (signal) {\n          state[6] = !0;\n          state[0](1);\n          return state[1](1);\n        } else if (state[4]) {\n          return 0;\n        } else {\n          state[4] = !0;\n          state[0](signal);\n          return state[1](signal);\n        }\n      }]));\n    };\n  };\n};\n\nvar concatMap$2 = concatMap;\n\nvar concat$2 = function concat(sources) {\n  return concatMap(function (x) {\n    return x;\n  })(fromArray(sources));\n};\n\nvar concatAll$2 = function concatAll(source) {\n  return concatMap(function (x) {\n    return x;\n  })(source);\n};\n\nvar filter$2 = function filter(f) {\n  return function (source) {\n    return function (sink) {\n      return captureTalkback(source, function (signal, talkback) {\n        if ('number' == typeof signal || !signal.tag || f(signal[0])) {\n          return sink(signal);\n        } else {\n          return talkback(0);\n        }\n      });\n    };\n  };\n};\n\nvar map$2 = function map(f) {\n  return function (source) {\n    return function (sink) {\n      return _1(source, function (signal) {\n        var tmp;\n        tmp = 'number' == typeof signal ? 0 : signal.tag ? __(1, [f(signal[0])]) : __(0, [signal[0]]);\n        return sink(tmp);\n      });\n    };\n  };\n};\n\nvar mergeMap$2 = mergeMap;\n\nvar merge$2 = function merge(sources) {\n  return mergeMap(function (x) {\n    return x;\n  })(fromArray(sources));\n};\n\nvar mergeAll$2 = mergeAll;\nvar flatten$2 = mergeAll;\n\nvar onEnd$2 = function onEnd(f) {\n  return function (source) {\n    return function (sink) {\n      var ended = [!1];\n      return _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          if (ended[0]) {\n            return 0;\n          } else {\n            ended[0] = !0;\n            sink(signal);\n            return f();\n          }\n        } else if (signal.tag) {\n          return sink(signal);\n        } else {\n          var talkback = signal[0];\n          return sink(__(0, [function (signal) {\n            if (signal) {\n              if (ended[0]) {} else {\n                ended[0] = !0;\n                f();\n              }\n            }\n\n            return talkback(signal);\n          }]));\n        }\n      });\n    };\n  };\n};\n\nvar onPush$2 = onPush;\nvar tap$2 = onPush;\n\nvar onStart$2 = function onStart(f) {\n  return function (source) {\n    return function (sink) {\n      return _1(source, function (signal) {\n        if ('number' == typeof signal || signal.tag) {\n          return sink(signal);\n        } else {\n          sink(signal);\n          return f();\n        }\n      });\n    };\n  };\n};\n\nvar sample$2 = function sample(notifier) {\n  return function (source) {\n    return function (sink) {\n      var state = [!1, void 0, function (param) {\n        return 0;\n      }, function (param) {\n        return 0;\n      }];\n\n      _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          state[0] = !0;\n          state[3](1);\n          return sink(0);\n        } else if (signal.tag) {\n          state[1] = some(signal[0]);\n          return 0;\n        } else {\n          state[2] = signal[0];\n          return 0;\n        }\n      });\n\n      _1(notifier, function (signal) {\n        var match = state[1];\n\n        if ('number' == typeof signal) {\n          state[0] = !0;\n          state[2](1);\n          return sink(0);\n        } else if (signal.tag) {\n          if (void 0 !== match && !state[0]) {\n            state[1] = void 0;\n            return sink(__(1, [valFromOption(match)]));\n          } else {\n            return 0;\n          }\n        } else {\n          state[3] = signal[0];\n          return 0;\n        }\n      });\n\n      return sink(__(0, [function (signal) {\n        if (signal) {\n          state[0] = !0;\n          state[2](1);\n          return state[3](1);\n        } else {\n          state[2](0);\n          return state[3](0);\n        }\n      }]));\n    };\n  };\n};\n\nvar scan$2 = function scan(f, seed) {\n  return function (source) {\n    return function (sink) {\n      var acc = [seed];\n      return _1(source, function (signal) {\n        var tmp;\n\n        if ('number' == typeof signal) {\n          tmp = 0;\n        } else if (signal.tag) {\n          acc[0] = f(acc[0], signal[0]);\n          tmp = __(1, [acc[0]]);\n        } else {\n          tmp = __(0, [signal[0]]);\n        }\n\n        return sink(tmp);\n      });\n    };\n  };\n};\n\nvar share$2 = function share(source) {\n  var state = [new Array(), talkbackPlaceholder, !1];\n  return function (sink) {\n    state[0] = state[0].concat(sink);\n\n    if (1 === state[0].length) {\n      _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          state[0].forEach(function (sink) {\n            return sink(0);\n          });\n          state[0] = new Array();\n          return 0;\n        } else if (signal.tag) {\n          state[2] = !1;\n          state[0].forEach(function (sink) {\n            return sink(signal);\n          });\n          return 0;\n        } else {\n          state[1] = signal[0];\n          return 0;\n        }\n      });\n    }\n\n    return sink(__(0, [function (signal) {\n      if (signal) {\n        state[0] = state[0].filter(function (x) {\n          return x !== sink;\n        });\n\n        if (0 === state[0].length) {\n          return state[1](1);\n        } else {\n          return 0;\n        }\n      } else if (state[2]) {\n        return 0;\n      } else {\n        state[2] = !0;\n        return state[1](signal);\n      }\n    }]));\n  };\n};\n\nvar skip$2 = function skip(wait) {\n  return function (source) {\n    return function (sink) {\n      var rest = [wait];\n      return captureTalkback(source, function (signal, talkback) {\n        if ('number' == typeof signal || !(signal.tag && rest[0] > 0)) {\n          return sink(signal);\n        } else {\n          rest[0] = rest[0] - 1 | 0;\n          return talkback(0);\n        }\n      });\n    };\n  };\n};\n\nvar skipUntil$2 = function skipUntil(notifier) {\n  return function (source) {\n    return function (sink) {\n      var state = [!0, !1, !1, talkbackPlaceholder, talkbackPlaceholder];\n\n      _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          if (state[0]) {\n            state[4](1);\n          }\n\n          state[1] = !0;\n          return sink(0);\n        } else if (signal.tag) {\n          if (state[0] && !state[1]) {\n            return state[3](0);\n          } else if (state[1]) {\n            return 0;\n          } else {\n            state[2] = !1;\n            return sink(signal);\n          }\n        } else {\n          var tb = signal[0];\n          state[3] = tb;\n          return _1(notifier, function (signal) {\n            if ('number' == typeof signal) {\n              return 0;\n            } else if (signal.tag) {\n              state[0] = !1;\n              return state[4](1);\n            } else {\n              var innerTb = signal[0];\n              state[4] = innerTb;\n              innerTb(0);\n              return tb(0);\n            }\n          });\n        }\n      });\n\n      return sink(__(0, [function (signal) {\n        if (signal) {\n          if (state[0]) {\n            state[4](1);\n          }\n\n          state[1] = !0;\n          return state[3](1);\n        } else if (!state[2] && !state[1]) {\n          state[2] = !0;\n          return state[3](0);\n        } else {\n          return 0;\n        }\n      }]));\n    };\n  };\n};\n\nvar skipWhile$2 = function skipWhile(f) {\n  return function (source) {\n    return function (sink) {\n      var skip = [!0];\n      return captureTalkback(source, function (signal, talkback) {\n        if ('number' == typeof signal || !signal.tag || !skip[0]) {\n          return sink(signal);\n        } else if (f(signal[0])) {\n          return talkback(0);\n        } else {\n          skip[0] = !1;\n          return sink(signal);\n        }\n      });\n    };\n  };\n};\n\nvar switchMap$2 = switchMap;\n\nvar switchAll$2 = function switchAll(source) {\n  return switchMap(function (x) {\n    return x;\n  })(source);\n};\n\nvar take$2 = function take(max) {\n  return function (source) {\n    return function (sink) {\n      var state = [0, talkbackPlaceholder];\n\n      _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          if (state[0] < max) {\n            state[0] = max;\n            return sink(0);\n          } else {\n            return 0;\n          }\n        } else if (signal.tag) {\n          if (state[0] < max) {\n            state[0] = state[0] + 1 | 0;\n            sink(signal);\n\n            if (state[0] === max) {\n              sink(0);\n              return state[1](1);\n            } else {\n              return 0;\n            }\n          } else {\n            return 0;\n          }\n        } else {\n          state[1] = signal[0];\n          return 0;\n        }\n      });\n\n      return sink(__(0, [function (signal) {\n        if (state[0] < max) {\n          if (signal) {\n            state[0] = max;\n            return state[1](1);\n          } else {\n            return state[1](0);\n          }\n        } else {\n          return 0;\n        }\n      }]));\n    };\n  };\n};\n\nvar takeLast$2 = takeLast;\n\nvar takeUntil$2 = function takeUntil(notifier) {\n  return function (source) {\n    return function (sink) {\n      var state = [!1, talkbackPlaceholder, talkbackPlaceholder];\n\n      _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          if (state[0]) {\n            return 0;\n          } else {\n            state[0] = !0;\n            state[2](1);\n            return sink(0);\n          }\n        } else if (signal.tag) {\n          if (state[0]) {\n            return 0;\n          } else {\n            return sink(signal);\n          }\n        } else {\n          state[1] = signal[0];\n          return _1(notifier, function (signal) {\n            if ('number' == typeof signal) {\n              return 0;\n            } else if (signal.tag) {\n              state[0] = !0;\n              state[1](1);\n              return sink(0);\n            } else {\n              var innerTb = signal[0];\n              state[2] = innerTb;\n              return innerTb(0);\n            }\n          });\n        }\n      });\n\n      return sink(__(0, [function (signal) {\n        if (state[0]) {\n          return 0;\n        } else if (signal) {\n          state[0] = !0;\n          state[1](1);\n          return state[2](1);\n        } else {\n          return state[1](0);\n        }\n      }]));\n    };\n  };\n};\n\nvar takeWhile$2 = function takeWhile(f) {\n  return function (source) {\n    return function (sink) {\n      var ended = [!1];\n      var talkback = [talkbackPlaceholder];\n\n      _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          if (ended[0]) {\n            return 0;\n          } else {\n            ended[0] = !0;\n            return sink(0);\n          }\n        } else if (signal.tag) {\n          if (ended[0]) {\n            return 0;\n          } else if (f(signal[0])) {\n            return sink(signal);\n          } else {\n            ended[0] = !0;\n            sink(0);\n            return talkback[0](1);\n          }\n        } else {\n          talkback[0] = signal[0];\n          return sink(signal);\n        }\n      });\n\n      return sink(__(0, [function (signal) {\n        if (ended[0]) {\n          return 0;\n        } else if (signal) {\n          ended[0] = !0;\n          return talkback[0](1);\n        } else {\n          return talkback[0](0);\n        }\n      }]));\n    };\n  };\n};\n\nvar publish$2 = function publish(source) {\n  var state = [talkbackPlaceholder, !1];\n\n  _1(source, function (signal) {\n    if ('number' == typeof signal) {\n      state[1] = !0;\n      return 0;\n    } else if (signal.tag) {\n      if (state[1]) {\n        return 0;\n      } else {\n        return state[0](0);\n      }\n    } else {\n      var x = signal[0];\n      state[0] = x;\n      return x(0);\n    }\n  });\n\n  return [function (param) {\n    if (state[1]) {\n      return 0;\n    } else {\n      state[1] = !0;\n      return state[0](1);\n    }\n  }];\n};\n\nvar subscribe$2 = subscribe;\n\nvar forEach$2 = function forEach(f) {\n  return function (source) {\n    subscribe(f)(source);\n    return 0;\n  };\n};\n\nvar toArray$2 = function toArray(source) {\n  var state = [new Array(), talkbackPlaceholder, void 0, !1];\n\n  _1(source, function (signal) {\n    if ('number' == typeof signal) {\n      state[3] = !0;\n      return 0;\n    } else if (signal.tag) {\n      state[0].push(signal[0]);\n      return state[1](0);\n    } else {\n      var x = signal[0];\n      state[1] = x;\n      return x(0);\n    }\n  });\n\n  if (!state[3]) {\n    state[1](1);\n  }\n\n  return state[0];\n};\n\nvar debounce$2 = function debounce(f) {\n  return function (source) {\n    return function (sink) {\n      var gotEndSignal = [!1];\n      var id = [void 0];\n\n      var $$clearTimeout$1 = function $$clearTimeout$1(param) {\n        var match = id[0];\n\n        if (void 0 !== match) {\n          id[0] = void 0;\n          clearTimeout(valFromOption(match));\n          return 0;\n        } else {\n          return 0;\n        }\n      };\n\n      return _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          gotEndSignal[0] = !0;\n\n          if (void 0 !== id[0]) {\n            return 0;\n          } else {\n            return sink(0);\n          }\n        } else if (signal.tag) {\n          $$clearTimeout$1();\n          id[0] = some(setTimeout(function (param) {\n            id[0] = void 0;\n            sink(signal);\n\n            if (gotEndSignal[0]) {\n              return sink(0);\n            } else {\n              return 0;\n            }\n          }, f(signal[0])));\n          return 0;\n        } else {\n          var tb = signal[0];\n          return sink(__(0, [function (signal) {\n            if (signal) {\n              $$clearTimeout$1();\n              return tb(1);\n            } else {\n              return tb(signal);\n            }\n          }]));\n        }\n      });\n    };\n  };\n};\n\nvar delay$2 = function delay(wait) {\n  return function (source) {\n    return function (sink) {\n      var state = [talkbackPlaceholder, 0, !1];\n\n      _1(source, function (signal) {\n        var exit = 0;\n\n        if ('number' == typeof signal || signal.tag) {\n          exit = 1;\n        } else {\n          state[0] = signal[0];\n          return 0;\n        }\n\n        if (1 === exit) {\n          if (state[2]) {\n            return 0;\n          } else {\n            state[1] = state[1] + 1 | 0;\n            setTimeout(function (param) {\n              if (state[2] && 0 === state[1]) {\n                sink(0);\n              } else {\n                state[1] = state[1] - 1 | 0;\n              }\n\n              return sink(signal);\n            }, wait);\n            return 0;\n          }\n        }\n      });\n\n      return sink(__(0, [function (signal) {\n        if (signal) {\n          state[2] = !0;\n\n          if (0 === state[1]) {\n            return sink(0);\n          } else {\n            return 0;\n          }\n        } else if (state[2]) {\n          return 0;\n        } else {\n          return state[0](signal);\n        }\n      }]));\n    };\n  };\n};\n\nvar throttle$2 = function throttle(f) {\n  return function (source) {\n    return function (sink) {\n      var skip = [!1];\n      var id = [void 0];\n\n      var $$clearTimeout$1 = function $$clearTimeout$1(param) {\n        var match = id[0];\n\n        if (void 0 !== match) {\n          clearTimeout(valFromOption(match));\n          return 0;\n        } else {\n          return 0;\n        }\n      };\n\n      return _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          $$clearTimeout$1();\n          return sink(0);\n        } else if (signal.tag) {\n          if (skip[0]) {\n            return 0;\n          } else {\n            skip[0] = !0;\n            $$clearTimeout$1();\n            id[0] = some(setTimeout(function (param) {\n              id[0] = void 0;\n              skip[0] = !1;\n              return 0;\n            }, f(signal[0])));\n            return sink(signal);\n          }\n        } else {\n          var tb = signal[0];\n          return sink(__(0, [function (signal) {\n            if (signal) {\n              $$clearTimeout$1();\n              return tb(1);\n            } else {\n              return tb(signal);\n            }\n          }]));\n        }\n      });\n    };\n  };\n};\n\nvar toPromise$2 = toPromise$1;\n\nvar interval$2 = function interval(p) {\n  return function (sink) {\n    var i = [0];\n    var id = setInterval(function (param) {\n      var num = i[0];\n      i[0] = i[0] + 1 | 0;\n      return sink(__(1, [num]));\n    }, p);\n    return sink(__(0, [function (signal) {\n      if (signal) {\n        clearInterval(id);\n        return 0;\n      } else {\n        return 0;\n      }\n    }]));\n  };\n};\n\nvar fromDomEvent$2 = function fromDomEvent(element, $$event) {\n  return function (sink) {\n    var addEventListener = function addEventListener(element, event, handler) {\n      element.addEventListener(event, handler);\n    };\n\n    var removeEventListener = function removeEventListener(element, event, handler) {\n      element.removeEventListener(event, handler);\n    };\n\n    return fromListener(function (handler) {\n      return _3(addEventListener, element, $$event, handler);\n    }, function (handler) {\n      return _3(removeEventListener, element, $$event, handler);\n    })(sink);\n  };\n};\n\nvar fromListener$2 = fromListener;\n\nvar fromPromise$2 = function fromPromise(promise) {\n  return function (sink) {\n    var ended = [!1];\n    promise.then(function (value) {\n      if (!ended[0]) {\n        sink(__(1, [value]));\n        sink(0);\n      }\n\n      return Promise.resolve(0);\n    });\n    return sink(__(0, [function (signal) {\n      if (signal) {\n        ended[0] = !0;\n        return 0;\n      } else {\n        return 0;\n      }\n    }]));\n  };\n};\n\nvar fromObservable$2 = function fromObservable(input) {\n  var observable = void 0 !== input[observableSymbol] ? input[observableSymbol]() : input;\n  return function (sink) {\n    var subscription = observable.subscribe({\n      next: function next(value) {\n        return sink(__(1, [value]));\n      },\n      complete: function complete() {\n        return sink(0);\n      },\n      error: function error(param) {\n        return 0;\n      }\n    });\n    return sink(__(0, [function (signal) {\n      if (signal) {\n        return subscription.unsubscribe();\n      } else {\n        return 0;\n      }\n    }]));\n  };\n};\n\nvar toObservable$2 = function toObservable(source) {\n  var observable = {\n    subscribe: function subscribe(observer) {\n      var state = [talkbackPlaceholder, !1];\n\n      _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          state[1] = !0;\n          return observer.complete();\n        } else if (signal.tag) {\n          if (state[1]) {\n            return 0;\n          } else {\n            observer.next(signal[0]);\n            return state[0](0);\n          }\n        } else {\n          var x = signal[0];\n          state[0] = x;\n          return x(0);\n        }\n      });\n\n      return {\n        unsubscribe: function unsubscribe() {\n          if (state[1]) {\n            return 0;\n          } else {\n            state[1] = !0;\n            return state[0](1);\n          }\n        }\n      };\n    }\n  };\n\n  observable[observableSymbol] = function (param) {\n    return observable;\n  };\n\n  return observable;\n};\n\nvar fromCallbag$2 = function fromCallbag(callbag) {\n  return function (sink) {\n    return callbag(0, function (signal, data) {\n      switch (signal) {\n        case 0:\n          return sink(__(0, [function (talkbackSignal) {\n            if (talkbackSignal) {\n              return data(2);\n            } else {\n              return data(1);\n            }\n          }]));\n\n        case 1:\n          return sink(__(1, [data]));\n\n        case 2:\n          return sink(0);\n      }\n    });\n  };\n};\n\nvar toCallbag$2 = function toCallbag(source) {\n  return function (signal, data) {\n    if (0 === signal) {\n      return _1(source, function (signal) {\n        if ('number' == typeof signal) {\n          return data(2, 0);\n        } else if (signal.tag) {\n          return data(1, signal[0]);\n        } else {\n          var talkbackFn = signal[0];\n          return data(0, function (talkback) {\n            switch (talkback) {\n              case 0:\n                return 0;\n\n              case 1:\n                return talkbackFn(0);\n\n              case 2:\n                return talkbackFn(1);\n            }\n          });\n        }\n      });\n    } else {\n      return 0;\n    }\n  };\n};\n\nexport { Types, buffer$2 as buffer, combine$2 as combine, concat$2 as concat, concatAll$2 as concatAll, concatMap$2 as concatMap, debounce$2 as debounce, delay$2 as delay, empty$2 as empty, filter$2 as filter, flatten$2 as flatten, forEach$2 as forEach, fromArray$2 as fromArray, fromCallbag$2 as fromCallbag, fromDomEvent$2 as fromDomEvent, fromList$2 as fromList, fromListener$2 as fromListener, fromObservable$2 as fromObservable, fromPromise$2 as fromPromise, fromValue$2 as fromValue, interval$2 as interval, make$2 as make, makeSubject$2 as makeSubject, map$2 as map, merge$2 as merge, mergeAll$2 as mergeAll, mergeMap$2 as mergeMap, never$2 as never, onEnd$2 as onEnd, onPush$2 as onPush, onStart$2 as onStart, pipe, publish$2 as publish, sample$2 as sample, scan$2 as scan, share$2 as share, skip$2 as skip, skipUntil$2 as skipUntil, skipWhile$2 as skipWhile, subscribe$2 as subscribe, switchAll$2 as switchAll, switchMap$2 as switchMap, take$2 as take, takeLast$2 as takeLast, takeUntil$2 as takeUntil, takeWhile$2 as takeWhile, tap$2 as tap, throttle$2 as throttle, toArray$2 as toArray, toCallbag$2 as toCallbag, toObservable$2 as toObservable, toPromise$2 as toPromise };","map":null,"metadata":{},"sourceType":"module"}