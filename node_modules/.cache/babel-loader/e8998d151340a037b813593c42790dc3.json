{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/MetricSelection.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { FormControl, MenuItem, Select } from '@material-ui/core';\nimport { actions } from './reducer';\nimport { Provider, useQuery } from 'urql';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Chip from '../../components/Chip';\nimport ShowData from './ShowData';\nimport { GET_METRICS_QUERY, CLIENT } from './Queries';\n\nvar getOptions = function getOptions(state) {\n  var metrics = state.metric.metrics;\n  return {\n    metrics: metrics\n  };\n};\n\nvar MetricSelection = function MetricSelection() {\n  var _useQuery = useQuery({\n    query: GET_METRICS_QUERY\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var dispatch = useDispatch();\n  var data = result.data,\n      fetching = result.fetching,\n      error = result.error;\n\n  var _useSelector = useSelector(getOptions),\n      metrics = _useSelector.metrics;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedMetrics = _useState2[0],\n      setSelectedMetrics = _useState2[1];\n\n  useEffect(function () {\n    if (error) {\n      dispatch(actions.metricApiErrorReceived({\n        error: error.message\n      }));\n    }\n\n    if (!data) return;\n    dispatch(actions.metricTypesReceived({\n      metricArray: data.getMetrics\n    }));\n  }, [dispatch, data, error]);\n\n  var showMetricOptions = function showMetricOptions() {\n    if (!data || metrics.length === 0) {} else {\n      return metrics.map(function (metric) {\n        return React.createElement(MenuItem, {\n          key: metric,\n          value: metric,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, metric);\n      });\n    }\n  };\n\n  var handleChange = function handleChange(event) {\n    console.log(event.target.value);\n    setSelectedMetrics(event.target.value);\n    dispatch(actions.selectedMetrics({\n      selectedMetrics: event.target.value\n    }));\n  };\n\n  var handleDelete = function handleDelete() {\n    selectedMetrics.delete();\n  };\n\n  if (fetching) return React.createElement(Chip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(Select, {\n    onChange: handleChange,\n    value: selectedMetrics,\n    multiple: true,\n    renderValue: function renderValue(selected) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, selected.map(function (value) {\n        return React.createElement(Chip, {\n          key: value,\n          label: value,\n          onDelete: handleDelete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        });\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, showMetricOptions())), React.createElement(ShowData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }));\n};\n\nexport default (function () {\n  return React.createElement(Provider, {\n    value: CLIENT,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(MetricSelection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/MetricSelection.tsx"],"names":["React","useEffect","useState","FormControl","MenuItem","Select","actions","Provider","useQuery","useDispatch","useSelector","Chip","ShowData","GET_METRICS_QUERY","CLIENT","getOptions","state","metrics","metric","MetricSelection","query","result","dispatch","data","fetching","error","selectedMetrics","setSelectedMetrics","metricApiErrorReceived","message","metricTypesReceived","metricArray","getMetrics","showMetricOptions","length","map","handleChange","event","console","log","target","value","handleDelete","delete","selected"],"mappings":"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","sourcesContent":["import React, {useEffect, useState } from 'react'\nimport { FormControl, MenuItem, Select} from '@material-ui/core'\nimport { actions } from './reducer'\nimport { Provider, useQuery } from 'urql'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { IState } from '../../store'\nimport Chip from '../../components/Chip'\nimport ShowData from './ShowData'\nimport { GET_METRICS_QUERY, CLIENT } from './Queries'\n\nconst getOptions = (state: IState) => {\n    const { metrics } = state.metric\n    return { metrics }\n}\n\nconst MetricSelection = () => {\n\n    const [result] = useQuery({\n        query: GET_METRICS_QUERY\n    })\n\n    const dispatch = useDispatch()\n    const {data, fetching, error} = result\n    const {metrics} = useSelector(getOptions)\n    const [ selectedMetrics, setSelectedMetrics] = useState([]) \n\n\n    useEffect(() => {\n        if (error){\n            dispatch(actions.metricApiErrorReceived({ error: error.message}))\n        }\n        if(!data) return\n        dispatch(actions.metricTypesReceived({ metricArray: data.getMetrics}))\n    }, [dispatch, data, error])\n\n    const showMetricOptions = () => {\n        if(!data || metrics.length === 0){\n        } else {\n            return metrics.map((metric: string) => {\n                return(\n                    <MenuItem key={metric} value={metric}>{metric}</MenuItem>\n                )\n            })\n        }\n        \n    }\n\n    const handleChange = (event: any) => {\n        console.log(event.target.value)\n        setSelectedMetrics(event.target.value)\n        dispatch(actions.selectedMetrics({ selectedMetrics: event.target.value}))\n    }\n\n    const handleDelete = () => {\n        selectedMetrics.delete()\n    }\n\n    if (fetching) return <Chip />\n\n    return (\n        <div>\n            <FormControl >\n                <Select\n                    onChange={handleChange}\n                    value={ selectedMetrics }\n                    multiple\n                    renderValue={(selected: any)=> (\n                        <div>\n                            {selected.map((value: any) =>(\n                                <Chip key={value} label={value} onDelete={handleDelete}/>\n                            ))}\n                        </div>\n                    )}\n                >\n                    {showMetricOptions()}\n                </Select>\n            </FormControl>\n            <ShowData />\n        </div>\n    )\n   \n}\n\nexport default () => {\n    return(\n        <Provider value={CLIENT}>\n         <MetricSelection />\n        </Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}