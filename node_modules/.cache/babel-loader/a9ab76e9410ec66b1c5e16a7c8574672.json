{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowData.tsx\";\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createClient, useQuery, Provider } from 'urql';\nimport Graph from './Graph';\nvar client = createClient({\n  url: 'https://react.eogresources.com/graphql'\n});\nvar LAST_KNOWN_MEASUREMENT_QUERY = \"\\n   query($metricName: String!){\\n       getLastKnownMeasurement(metricName: $metricName){\\n           metric\\n           at\\n           value\\n           unit\\n       }\\n   } \\n\";\n\nvar getMetric = function getMetric(state) {\n  var selectedMetrics = state.metric.selectedMetrics;\n  return {\n    selectedMetrics: selectedMetrics\n  };\n};\n\nvar ShowData = function ShowData() {\n  var dispatch = useDispatch();\n  var metricsObjectArray = useSelector(getMetric);\n  var metricsArray = metricsObjectArray.selectedMetrics;\n  var lastKnownMetric = metricsArray[metricsArray.length - 1];\n\n  var _useQuery = useQuery({\n    query: LAST_KNOWN_MEASUREMENT_QUERY,\n    variables: {\n      metricName: lastKnownMetric\n    },\n    pause: !lastKnownMetric,\n    pollInterval: 5000,\n    requestPolicy: 'cache-and-network'\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0]; // const { data, error} = result\n  // useEffect(() => {\n  //     if(error){\n  //         dispatch(actions.metricApiErrorReceived({ error: error.message}))\n  //     }\n  //     if (!data) return\n  //     const { getLastKnownMeasurement } = data\n  //     dispatch(actions.lastMeasurement(getLastKnownMeasurement))\n  // }, [dispatch, data, error])\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Graph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n};\n\nexport default (function () {\n  return React.createElement(Provider, {\n    value: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(ShowData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowData.tsx"],"names":["React","useDispatch","useSelector","createClient","useQuery","Provider","Graph","client","url","LAST_KNOWN_MEASUREMENT_QUERY","getMetric","state","selectedMetrics","metric","ShowData","dispatch","metricsObjectArray","metricsArray","lastKnownMetric","length","query","variables","metricName","pause","pollInterval","requestPolicy","result"],"mappings":";;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AAGA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,QAAjC,QAAiD,MAAjD;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAGA,IAAMC,MAAM,GAAGJ,YAAY,CAAC;AACxBK,EAAAA,GAAG,EAAE;AADmB,CAAD,CAA3B;AAIA,IAAMC,4BAA4B,wLAAlC;;AAWA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAmB;AAAA,MACzBC,eADyB,GACLD,KAAK,CAACE,MADD,CACzBD,eADyB;AAEjC,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHD;;AAKA,IAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAEnB,MAAMC,QAAQ,GAAGd,WAAW,EAA5B;AACA,MAAMe,kBAAkB,GAAGd,WAAW,CAACQ,SAAD,CAAtC;AACA,MAAMO,YAAY,GAAGD,kBAAkB,CAACJ,eAAxC;AACA,MAAMM,eAAe,GAAGD,YAAY,CAACA,YAAY,CAACE,MAAb,GAAsB,CAAvB,CAApC;;AALmB,kBAOFf,QAAQ,CAAC;AACtBgB,IAAAA,KAAK,EAAEX,4BADe;AAEtBY,IAAAA,SAAS,EAAE;AACPC,MAAAA,UAAU,EAAEJ;AADL,KAFW;AAKtBK,IAAAA,KAAK,EAAE,CAACL,eALc;AAMtBM,IAAAA,YAAY,EAAE,IANQ;AAOtBC,IAAAA,aAAa,EAAE;AAPO,GAAD,CAPN;AAAA;AAAA,MAOZC,MAPY,kBAiBnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAlCD;;AAqCA,gBAAe,YAAM;AACjB,SACI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEnB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAND","sourcesContent":["import React, { useEffect } from 'react'\nimport { IState } from '../../store'\nimport { actions } from './reducer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { createClient, useQuery, Provider } from 'urql'\nimport Graph from './Graph'\n\n\nconst client = createClient({\n    url: 'https://react.eogresources.com/graphql',\n})\n\nconst LAST_KNOWN_MEASUREMENT_QUERY = `\n   query($metricName: String!){\n       getLastKnownMeasurement(metricName: $metricName){\n           metric\n           at\n           value\n           unit\n       }\n   } \n`\n\nconst getMetric = (state: IState) => {\n    const { selectedMetrics } = state.metric\n    return { selectedMetrics }\n}\n\nconst ShowData = () => {\n\n    const dispatch = useDispatch()\n    const metricsObjectArray = useSelector(getMetric)\n    const metricsArray = metricsObjectArray.selectedMetrics\n    const lastKnownMetric = metricsArray[metricsArray.length - 1]\n\n    const [result] = useQuery({\n        query: LAST_KNOWN_MEASUREMENT_QUERY,\n        variables: {\n            metricName: lastKnownMetric,\n        },\n        pause: !lastKnownMetric,\n        pollInterval: 5000,\n        requestPolicy: 'cache-and-network',\n    })\n\n    // const { data, error} = result\n    // useEffect(() => {\n    //     if(error){\n    //         dispatch(actions.metricApiErrorReceived({ error: error.message}))\n    //     }\n    //     if (!data) return\n    //     const { getLastKnownMeasurement } = data\n    //     dispatch(actions.lastMeasurement(getLastKnownMeasurement))\n    // }, [dispatch, data, error])\n\n \n\n    return(\n        <div>\n            <Graph />\n        </div>\n    )\n}\n\n\nexport default () => {\n    return(\n        <Provider value={client}>\n            <ShowData />\n        </Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}