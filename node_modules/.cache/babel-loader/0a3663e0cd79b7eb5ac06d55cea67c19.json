{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowChartData.tsx\";\nimport React, { useEffect } from 'react';\nimport moment from 'moment';\nimport { actions } from './reducer';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery } from 'urql';\nimport { LineChart, Line, XAxis, YAxis, ResponsiveContainer, Tooltip } from 'recharts';\nimport { LinearProgress, Card, CardContent, Typography } from '@material-ui/core';\nimport { MEASUREMENTS_QUERY } from './Queries';\n\nvar getLastKnownMeasurement = function getLastKnownMeasurement(state) {\n  var lastMeasurement = state.metric.lastMeasurement;\n  return {\n    lastMeasurement: lastMeasurement\n  };\n};\n\nvar getMeasurements = function getMeasurements(state) {\n  var Measurements = state.metric.Measurements;\n  return {\n    Measurements: Measurements\n  };\n};\n\nvar getSelectedMetrics = function getSelectedMetrics(state) {\n  var selectedMetrics = state.metric.selectedMetrics;\n  return {\n    selectedMetrics: selectedMetrics\n  };\n};\n\nvar ShowChartData = function ShowChartData() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(getLastKnownMeasurement),\n      lastMeasurement = _useSelector.lastMeasurement; // the last metric selected\n\n\n  var Measurements = useSelector(getMeasurements);\n  var visualData = Measurements.Measurements;\n  var timeLimit = new Date();\n  var input = {\n    metricName: lastMeasurement.metric,\n    after: lastMeasurement.at - 1800000,\n    before: timeLimit.getTime() - 10000\n  };\n\n  var _useQuery = useQuery({\n    query: MEASUREMENTS_QUERY,\n    variables: {\n      input: input\n    },\n    pause: !lastMeasurement.metric\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var data = result.data,\n      error = result.error;\n  useEffect(function () {\n    if (error) {\n      console.log(error);\n    }\n\n    if (!data) return;\n    var measurements = data;\n    dispatch(actions.chartMeasurements({\n      getMeasurements: measurements.getMeasurements\n    }));\n  }, [dispatch, data, error]);\n\n  var loadingData = function loadingData() {\n    if (!data) {\n      return React.createElement(LinearProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    }\n  };\n\n  var tickFormatter = function tickFormatter(ticks) {\n    return moment(ticks).format('HH:mm');\n  };\n\n  var renderToolTip = function renderToolTip(data) {\n    if (data.payload[0] !== undefined) {\n      var toolTipData = data.payload[0].payload;\n      var toolTime = moment(toolTipData.at).format('MMMM do YYYY, h:mm:ss a');\n      return React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(CardContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        color: \"textSecondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, toolTime)), React.createElement(CardContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, toolTipData.metric), React.createElement(CardContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"\".concat(toolTipData.value, \" \").concat(toolTipData.unit)));\n    }\n  };\n\n  console.log(selectedMetrics);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, loadingData(), React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 800,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(LineChart, {\n    margin: {\n      bottom: 20\n    },\n    data: visualData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Line, {\n    dataKey: \"value\",\n    type: \"monotone\",\n    animationEasing: \"ease-out\",\n    strokeWidth: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    dataKey: \"at\",\n    type: \"number\",\n    interval: \"preserveStart\",\n    tickFormatter: tickFormatter,\n    domain: ['dataMin', 'dataMax'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(YAxis, {\n    dataKey: \"value\",\n    height: 10,\n    domain: [0, 'dataMax'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(Tooltip, {\n    content: renderToolTip,\n    animationEasing: \"ease-out\",\n    isAnimationActive: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }))));\n};\n\nexport default (function () {\n  return React.createElement(ShowChartData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  });\n});","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowChartData.tsx"],"names":["React","useEffect","moment","actions","useSelector","useDispatch","useQuery","LineChart","Line","XAxis","YAxis","ResponsiveContainer","Tooltip","LinearProgress","Card","CardContent","Typography","MEASUREMENTS_QUERY","getLastKnownMeasurement","state","lastMeasurement","metric","getMeasurements","Measurements","getSelectedMetrics","selectedMetrics","ShowChartData","dispatch","visualData","timeLimit","Date","input","metricName","after","at","before","getTime","query","variables","pause","result","data","error","console","log","measurements","chartMeasurements","loadingData","tickFormatter","ticks","format","renderToolTip","payload","undefined","toolTipData","toolTime","value","unit","bottom"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport moment from 'moment'\n\nimport { IState } from '../../store'\nimport { actions } from './reducer'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useQuery } from 'urql'\nimport { LineChart, Line, XAxis, YAxis, ResponsiveContainer, Tooltip } from 'recharts'\nimport { LinearProgress, Card, CardContent, Typography } from '@material-ui/core'\nimport { MEASUREMENTS_QUERY, GET_MULTIPLE_QUERY } from './Queries'\n\nconst getLastKnownMeasurement = (state: IState) => {\n        const lastMeasurement = state.metric.lastMeasurement\n        return { lastMeasurement }\n    }\n\nconst getMeasurements = ( state: IState ) => {\n    const Measurements = state.metric.Measurements\n    return { Measurements }\n}\n\nconst getSelectedMetrics = ( state: IState ) => {\n    const selectedMetrics = state.metric.selectedMetrics\n    return { selectedMetrics }\n}\n\nconst ShowChartData = () => {\n\n    const dispatch = useDispatch()\n    const { lastMeasurement } = useSelector(getLastKnownMeasurement) // the last metric selected\n    \n    const  Measurements  = useSelector(getMeasurements)\n    const visualData = Measurements.Measurements\n\n    const timeLimit = new Date()\n    const input = {\n        metricName: lastMeasurement.metric,\n        after: lastMeasurement.at - 1800000,\n        before: timeLimit.getTime() - 10000,\n    }\n\n    const [result] = useQuery({\n        query: MEASUREMENTS_QUERY,\n        variables: {\n            input,\n        },\n        pause: !lastMeasurement.metric,\n    })\n\n    const { data, error } = result\n    useEffect(() => {\n        if(error){\n            console.log(error)\n        }\n        if (!data) return\n        const measurements = data\n        dispatch(actions.chartMeasurements({ getMeasurements: measurements.getMeasurements }))\n    }, [dispatch, data, error])\n\n\n    const loadingData = () => {\n        if(!data) {\n            return <LinearProgress />\n        }\n    }\n\n    const tickFormatter = (ticks: any) => {\n       return moment(ticks).format('HH:mm')\n    }\n\n    const renderToolTip = (data: any) => {\n        if(data.payload[0] !== undefined){\n            const toolTipData = (data.payload[0].payload)\n            const toolTime = moment(toolTipData.at).format('MMMM do YYYY, h:mm:ss a')\n            return(\n                <Card>\n                    <CardContent>\n                        <Typography color=\"textSecondary\">\n                            {toolTime}\n                        </Typography>\n                    </CardContent>\n                    <CardContent>\n                        {toolTipData.metric}\n                    </CardContent>\n                    <CardContent>\n                        {`${toolTipData.value} ${toolTipData.unit}`}\n                    </CardContent>\n                </Card>\n            )\n        }\n            \n          \n    }\n\n    console.log(selectedMetrics)\n    return(\n        <div>\n            {loadingData()}\n            <ResponsiveContainer width=\"100%\" height={800}>\n                <LineChart margin={{ bottom: 20 }}data={visualData}>\n                    <Line dataKey=\"value\" type=\"monotone\" animationEasing=\"ease-out\" strokeWidth={4}/>\n                    <XAxis\n                        dataKey=\"at\"\n                        type=\"number\"\n                        interval=\"preserveStart\"\n                        tickFormatter={tickFormatter}\n                        domain={['dataMin', 'dataMax']}   \n                    />\n                    <YAxis dataKey=\"value\" height={10} domain={[ 0, 'dataMax' ]}/>\n                    <Tooltip content={renderToolTip} animationEasing=\"ease-out\" isAnimationActive={true}/>\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    )\n}\n\nexport default () => {\n    return(\n        <ShowChartData />\n    )\n}"]},"metadata":{},"sourceType":"module"}