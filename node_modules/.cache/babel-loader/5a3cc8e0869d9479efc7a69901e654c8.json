{"ast":null,"code":"import { createSlice } from 'redux-starter-kit';\nvar initialState = {\n  metrics: [],\n  name: \"\",\n  lastMeasurement: {\n    metric: \"\",\n    at: 0,\n    value: 0.0,\n    unit: \"\"\n  }\n};\nvar slice = createSlice({\n  name: 'metric',\n  initialState: initialState,\n  reducers: {\n    metricTypesReceived: function metricTypesReceived(state, action) {\n      var metricArray = action.payload.metricArray;\n      state.metrics = metricArray;\n    },\n    selectedMetric: function (_selectedMetric) {\n      function selectedMetric(_x, _x2) {\n        return _selectedMetric.apply(this, arguments);\n      }\n\n      selectedMetric.toString = function () {\n        return _selectedMetric.toString();\n      };\n\n      return selectedMetric;\n    }(function (state, action) {\n      var name = action.payload.name;\n      state.name = name;\n    }),\n    lastMeasurement: function lastMeasurement(state, action) {\n      var _action$payload = action.payload,\n          metric = _action$payload.metric,\n          at = _action$payload.at,\n          value = _action$payload.value,\n          unit = _action$payload.unit;\n      state.lastMeasurement.metric = metric;\n      state.lastMeasurement.at = at;\n      state.lastMeasurement.value = value;\n      state.lastMeasurement.unit = unit;\n    },\n    metricApiErrorReceived: function metricApiErrorReceived(state, action) {\n      return state;\n    }\n  }\n});\nexport var reducer = slice.reducer;\nexport var actions = slice.actions;","map":{"version":3,"sources":["/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/src/Features/Graph/reducer.ts"],"names":["createSlice","initialState","metrics","name","lastMeasurement","metric","at","value","unit","slice","reducers","metricTypesReceived","state","action","metricArray","payload","selectedMetric","metricApiErrorReceived","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA2C,mBAA3C;AAqBA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,EADQ;AAEjBC,EAAAA,IAAI,EAAE,EAFW;AAGjBC,EAAAA,eAAe,EAAE;AACbC,IAAAA,MAAM,EAAE,EADK;AAEbC,IAAAA,EAAE,EAAE,CAFS;AAGbC,IAAAA,KAAK,EAAE,GAHM;AAIbC,IAAAA,IAAI,EAAE;AAJO;AAHA,CAArB;AAWA,IAAMC,KAAK,GAAGT,WAAW,CAAC;AACtBG,EAAAA,IAAI,EAAE,QADgB;AAEtBF,EAAAA,YAAY,EAAZA,YAFsB;AAGtBS,EAAAA,QAAQ,EAAE;AACNC,IAAAA,mBAAmB,EAAE,6BAACC,KAAD,EAAQC,MAAR,EAAmD;AAAA,UAC5DC,WAD4D,GAC5CD,MAAM,CAACE,OADqC,CAC5DD,WAD4D;AAEpEF,MAAAA,KAAK,CAACV,OAAN,GAAgBY,WAAhB;AAEH,KALK;AAMNE,IAAAA,cAAc;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,MAAE,UAACJ,KAAD,EAAQC,MAAR,EAAkD;AAAA,UACtDV,IADsD,GAC7CU,MAAM,CAACE,OADsC,CACtDZ,IADsD;AAE9DS,MAAAA,KAAK,CAACT,IAAN,GAAaA,IAAb;AACH,KAHa,CANR;AAUNC,IAAAA,eAAe,EAAE,yBAACQ,KAAD,EAAQC,MAAR,EAAwD;AAAA,4BACjCA,MAAM,CAACE,OAD0B;AAAA,UAC7DV,MAD6D,mBAC7DA,MAD6D;AAAA,UACrDC,EADqD,mBACrDA,EADqD;AAAA,UACjDC,KADiD,mBACjDA,KADiD;AAAA,UAC1CC,IAD0C,mBAC1CA,IAD0C;AAErEI,MAAAA,KAAK,CAACR,eAAN,CAAsBC,MAAtB,GAA+BA,MAA/B;AACAO,MAAAA,KAAK,CAACR,eAAN,CAAsBE,EAAtB,GAA2BA,EAA3B;AACAM,MAAAA,KAAK,CAACR,eAAN,CAAsBG,KAAtB,GAA8BA,KAA9B;AACAK,MAAAA,KAAK,CAACR,eAAN,CAAsBI,IAAtB,GAA6BA,IAA7B;AACH,KAhBK;AAiBNS,IAAAA,sBAAsB,EAAE,gCAACL,KAAD,EAAQC,MAAR;AAAA,aAAmDD,KAAnD;AAAA;AAjBlB;AAHY,CAAD,CAAzB;AAwBA,OAAO,IAAMM,OAAO,GAAGT,KAAK,CAACS,OAAtB;AACP,OAAO,IAAMC,OAAO,GAAGV,KAAK,CAACU,OAAtB","sourcesContent":["import { createSlice, PayloadAction } from 'redux-starter-kit';\n\nexport type MetricSelection = {\n    metricArray: string[]\n}\n\nexport type selectedMetric = {\n    name: string\n}\n\nexport type LastKnownMeasurement = {\n        metric: string,\n        at: number,\n        value: number,\n        unit: string\n}\n\nexport type ApiErrorAction = {\n    error: string;\n}\n\nconst initialState = {\n    metrics: [] as string[],\n    name: \"\",\n    lastMeasurement: {\n        metric: \"\",\n        at: 0,\n        value: 0.0,\n        unit: \"\"\n    }\n}\n\nconst slice = createSlice({\n    name: 'metric',\n    initialState,\n    reducers: {\n        metricTypesReceived: (state, action: PayloadAction<MetricSelection>) => {\n            const { metricArray } = action.payload;\n            state.metrics = metricArray;\n            \n        },\n        selectedMetric: (state, action: PayloadAction<selectedMetric>) => {\n            const { name } = action.payload\n            state.name = name\n        },\n        lastMeasurement: (state, action: PayloadAction<LastKnownMeasurement>) => {\n            const { metric, at, value, unit } = action.payload;\n            state.lastMeasurement.metric = metric;\n            state.lastMeasurement.at = at;\n            state.lastMeasurement.value = value;\n            state.lastMeasurement.unit = unit;\n        },\n        metricApiErrorReceived: (state, action: PayloadAction<ApiErrorAction> ) => state,\n    },\n})\n\nexport const reducer = slice.reducer\nexport const actions = slice.actions"]},"metadata":{},"sourceType":"module"}