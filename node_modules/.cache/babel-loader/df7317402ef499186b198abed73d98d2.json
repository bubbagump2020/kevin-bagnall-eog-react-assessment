{"ast":null,"code":"import { createSlice } from \"redux-starter-kit\";\nvar initialState = {\n  metrics: [],\n  selectedMetrics: [],\n  lastMeasurement: {\n    metric: \"\",\n    at: 0,\n    value: 0.0,\n    unit: \"\"\n  },\n  Measurements: [],\n  selectedMetricsAndMeasurements: []\n};\nvar slice = createSlice({\n  name: \"metric\",\n  initialState: initialState,\n  reducers: {\n    metricTypesReceived: function metricTypesReceived(state, action) {\n      var metricArray = action.payload.metricArray;\n      state.metrics = metricArray;\n    },\n    selectedMetrics: function selectedMetrics(state, action) {\n      var selectedMetrics = action.payload.selectedMetrics;\n      state.selectedMetrics = selectedMetrics;\n    },\n    selectedMetricsAndMeasurements: function selectedMetricsAndMeasurements(state, action) {\n      var selectedMetricsAndMeasurements = action.payload.selectedMetricsAndMeasurements;\n      state.selectedMetricsAndMeasurements = selectedMetricsAndMeasurements;\n    },\n    lastMeasurement: function lastMeasurement(state, action) {\n      var _action$payload = action.payload,\n          metric = _action$payload.metric,\n          at = _action$payload.at,\n          value = _action$payload.value,\n          unit = _action$payload.unit;\n      state.lastMeasurement.metric = metric;\n      state.lastMeasurement.at = at;\n      state.lastMeasurement.value = value;\n      state.lastMeasurement.unit = unit;\n    },\n    chartMeasurements: function chartMeasurements(state, action) {\n      var getMeasurements = action.payload.getMeasurements;\n      state.Measurements = getMeasurements;\n    },\n    metricApiErrorReceived: function metricApiErrorReceived(state, action) {\n      return state;\n    }\n  }\n});\nexport var reducer = slice.reducer;\nexport var actions = slice.actions;","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/reducer.ts"],"names":["createSlice","initialState","metrics","selectedMetrics","lastMeasurement","metric","at","value","unit","Measurements","selectedMetricsAndMeasurements","slice","name","reducers","metricTypesReceived","state","action","metricArray","payload","chartMeasurements","getMeasurements","metricApiErrorReceived","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA2C,mBAA3C;AA6BA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,eAAe,EAAE,EAFE;AAGnBC,EAAAA,eAAe,EAAE;AACfC,IAAAA,MAAM,EAAE,EADO;AAEfC,IAAAA,EAAE,EAAE,CAFW;AAGfC,IAAAA,KAAK,EAAE,GAHQ;AAIfC,IAAAA,IAAI,EAAE;AAJS,GAHE;AASnBC,EAAAA,YAAY,EAAE,EATK;AAUnBC,EAAAA,8BAA8B,EAAE;AAVb,CAArB;AAaA,IAAMC,KAAK,GAAGX,WAAW,CAAC;AACxBY,EAAAA,IAAI,EAAE,QADkB;AAExBX,EAAAA,YAAY,EAAZA,YAFwB;AAGxBY,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBAAmB,EAAE,6BAACC,KAAD,EAAQC,MAAR,EAAmD;AAAA,UAC9DC,WAD8D,GAC9CD,MAAM,CAACE,OADuC,CAC9DD,WAD8D;AAEtEF,MAAAA,KAAK,CAACb,OAAN,GAAgBe,WAAhB;AACD,KAJO;AAKRd,IAAAA,eAAe,EAAE,yBAACY,KAAD,EAAQC,MAAR,EAAmD;AAAA,UAC1Db,eAD0D,GACtCa,MAAM,CAACE,OAD+B,CAC1Df,eAD0D;AAElEY,MAAAA,KAAK,CAACZ,eAAN,GAAwBA,eAAxB;AACD,KARO;AASRO,IAAAA,8BAA8B,EAAE,wCAC9BK,KAD8B,EAE9BC,MAF8B,EAG3B;AAAA,UACKN,8BADL,GACwCM,MAAM,CAACE,OAD/C,CACKR,8BADL;AAEHK,MAAAA,KAAK,CAACL,8BAAN,GAAuCA,8BAAvC;AACD,KAfO;AAgBRN,IAAAA,eAAe,EAAE,yBAACW,KAAD,EAAQC,MAAR,EAAwD;AAAA,4BACnCA,MAAM,CAACE,OAD4B;AAAA,UAC/Db,MAD+D,mBAC/DA,MAD+D;AAAA,UACvDC,EADuD,mBACvDA,EADuD;AAAA,UACnDC,KADmD,mBACnDA,KADmD;AAAA,UAC5CC,IAD4C,mBAC5CA,IAD4C;AAEvEO,MAAAA,KAAK,CAACX,eAAN,CAAsBC,MAAtB,GAA+BA,MAA/B;AACAU,MAAAA,KAAK,CAACX,eAAN,CAAsBE,EAAtB,GAA2BA,EAA3B;AACAS,MAAAA,KAAK,CAACX,eAAN,CAAsBG,KAAtB,GAA8BA,KAA9B;AACAQ,MAAAA,KAAK,CAACX,eAAN,CAAsBI,IAAtB,GAA6BA,IAA7B;AACD,KAtBO;AAuBRW,IAAAA,iBAAiB,EAAE,2BAACJ,KAAD,EAAQC,MAAR,EAAgD;AAAA,UACzDI,eADyD,GACrCJ,MAAM,CAACE,OAD8B,CACzDE,eADyD;AAEjEL,MAAAA,KAAK,CAACN,YAAN,GAAqBW,eAArB;AACD,KA1BO;AA2BRC,IAAAA,sBAAsB,EAAE,gCAACN,KAAD,EAAQC,MAAR;AAAA,aACtBD,KADsB;AAAA;AA3BhB;AAHc,CAAD,CAAzB;AAmCA,OAAO,IAAMO,OAAO,GAAGX,KAAK,CAACW,OAAtB;AACP,OAAO,IAAMC,OAAO,GAAGZ,KAAK,CAACY,OAAtB","sourcesContent":["import { createSlice, PayloadAction } from \"redux-starter-kit\";\n\nexport type MetricSelection = {\n  metricArray: string[];\n};\n\nexport type selectedMetrics = {\n  selectedMetrics: string[];\n};\n\nexport type selectedMetricsAndMeasurements = {\n  selectedMetricsAndMeasurements: any[];\n};\n\nexport type LastKnownMeasurement = {\n  metric: string;\n  at: number;\n  value: number;\n  unit: string;\n};\n\nexport type Measurements = {\n  getMeasurements: Object[];\n};\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  metrics: [] as string[],\n  selectedMetrics: [] as string[],\n  lastMeasurement: {\n    metric: \"\",\n    at: 0,\n    value: 0.0,\n    unit: \"\"\n  },\n  Measurements: [] as Object[],\n  selectedMetricsAndMeasurements: [] as any[]\n};\n\nconst slice = createSlice({\n  name: \"metric\",\n  initialState,\n  reducers: {\n    metricTypesReceived: (state, action: PayloadAction<MetricSelection>) => {\n      const { metricArray } = action.payload;\n      state.metrics = metricArray;\n    },\n    selectedMetrics: (state, action: PayloadAction<selectedMetrics>) => {\n      const { selectedMetrics } = action.payload;\n      state.selectedMetrics = selectedMetrics;\n    },\n    selectedMetricsAndMeasurements: (\n      state,\n      action: PayloadAction<selectedMetricsAndMeasurements>\n    ) => {\n      const { selectedMetricsAndMeasurements } = action.payload;\n      state.selectedMetricsAndMeasurements = selectedMetricsAndMeasurements;\n    },\n    lastMeasurement: (state, action: PayloadAction<LastKnownMeasurement>) => {\n      const { metric, at, value, unit } = action.payload;\n      state.lastMeasurement.metric = metric;\n      state.lastMeasurement.at = at;\n      state.lastMeasurement.value = value;\n      state.lastMeasurement.unit = unit;\n    },\n    chartMeasurements: (state, action: PayloadAction<Measurements>) => {\n      const { getMeasurements } = action.payload;\n      state.Measurements = getMeasurements;\n    },\n    metricApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) =>\n      state\n  }\n});\n\nexport const reducer = slice.reducer;\nexport const actions = slice.actions;\n"]},"metadata":{},"sourceType":"module"}