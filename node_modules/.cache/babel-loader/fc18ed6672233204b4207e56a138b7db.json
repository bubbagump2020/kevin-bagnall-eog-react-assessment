{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowChartData.tsx\";\nimport React, { useEffect } from 'react';\nimport moment from 'moment';\nimport { actions } from './reducer';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery } from 'urql';\nimport { LineChart, Line, XAxis, YAxis, ResponsiveContainer } from 'recharts';\nimport { LinearProgress } from '@material-ui/core';\nvar MEASUREMENTS_QUERY = \"\\n   query($input: MeasurementQuery){\\n       getMeasurements(input: $input){\\n           metric\\n           at\\n           value\\n           unit\\n       }\\n   }\\n\";\n\nvar getLastKnownMeasurement = function getLastKnownMeasurement(state) {\n  var lastMeasurement = state.metric.lastMeasurement;\n  return {\n    lastMeasurement: lastMeasurement\n  };\n};\n\nvar getMeasurements = function getMeasurements(state) {\n  var Measurements = state.metric.Measurements;\n  return {\n    Measurements: Measurements\n  };\n};\n\nvar ShowChartData = function ShowChartData() {\n  var _useSelector = useSelector(getLastKnownMeasurement),\n      lastMeasurement = _useSelector.lastMeasurement;\n\n  var Measurements = useSelector(getMeasurements);\n  var start = new Date();\n  var end = new Date();\n  var endTime = end.toTimeString().split(' ')[0];\n  var timeLimit = new Date();\n  var input = {\n    metricName: lastMeasurement.metric,\n    after: lastMeasurement.at - 3600000,\n    before: timeLimit.getTime() - 10000\n  };\n\n  var _useQuery = useQuery({\n    query: MEASUREMENTS_QUERY,\n    variables: {\n      input: input\n    },\n    pause: !lastMeasurement.metric\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var dispatch = useDispatch();\n  var fetching = result.fetching,\n      data = result.data,\n      error = result.error;\n  useEffect(function () {\n    if (error) {\n      console.log(error);\n    }\n\n    if (!data) return;\n    var measurements = data;\n    dispatch(actions.chartMeasurements({\n      getMeasurements: measurements.getMeasurements\n    }));\n  }, [dispatch, data, error]);\n\n  var testConsole = function testConsole() {\n    if (!data) {\n      return React.createElement(LinearProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      });\n    } else {// console.log(data.getMeasurements)\n      // console.log(Measurements.Measurements)\n    }\n  };\n\n  var _tickFormatter = function tickFormatter(ticks) {\n    // <moment />\n    moment(ticks).format();\n    console.log(moment(ticks)); // moment(tick).format('HH:mm')\n  };\n\n  var visualData = Measurements.Measurements;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, testConsole(), React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 720,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(LineChart, {\n    margin: {\n      top: 20,\n      right: 30,\n      left: 0,\n      bottom: 0\n    },\n    data: visualData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Line, {\n    dataKey: \"value\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    dataKey: \"at\",\n    type: \"number\",\n    tickFormatter: function tickFormatter(ticks) {\n      return _tickFormatter(ticks);\n    },\n    domain: ['dataMin', 'dataMax'],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(YAxis, {\n    dataKey: \"value\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }))));\n};\n\nexport default (function () {\n  return React.createElement(ShowChartData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  });\n});","map":{"version":3,"sources":["/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowChartData.tsx"],"names":["React","useEffect","moment","actions","useSelector","useDispatch","useQuery","LineChart","Line","XAxis","YAxis","ResponsiveContainer","LinearProgress","MEASUREMENTS_QUERY","getLastKnownMeasurement","state","lastMeasurement","metric","getMeasurements","Measurements","ShowChartData","start","Date","end","endTime","toTimeString","split","timeLimit","input","metricName","after","at","before","getTime","query","variables","pause","result","dispatch","fetching","data","error","console","log","measurements","chartMeasurements","testConsole","tickFormatter","ticks","format","visualData","top","right","left","bottom"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport moment from 'moment'\n\nimport { IState } from '../../store'\nimport { actions } from './reducer'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useQuery } from 'urql'\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Label, ResponsiveContainer } from 'recharts'\nimport { LinearProgress } from '@material-ui/core'\n\nconst MEASUREMENTS_QUERY = `\n   query($input: MeasurementQuery){\n       getMeasurements(input: $input){\n           metric\n           at\n           value\n           unit\n       }\n   }\n`\n\nconst getLastKnownMeasurement = (state: IState) => {\n        const lastMeasurement = state.metric.lastMeasurement\n        return { lastMeasurement }\n    }\n\nconst getMeasurements = ( state: IState ) => {\n    const Measurements = state.metric.Measurements\n    return { Measurements }\n}\n\nconst ShowChartData = () => {\n\n    const { lastMeasurement } = useSelector(getLastKnownMeasurement)\n    const  Measurements  = useSelector(getMeasurements)\n    let start = new Date()\n    let end = new Date()\n    const endTime = end.toTimeString().split(' ')[0]\n    const timeLimit = new Date()\n    const input = {\n        metricName: lastMeasurement.metric,\n        after: lastMeasurement.at - 3600000,\n        before: timeLimit.getTime() - 10000,\n    }\n\n    const [result] = useQuery({\n        query: MEASUREMENTS_QUERY,\n        variables: {\n            input,\n        },\n        pause: !lastMeasurement.metric,\n    })\n\n    const dispatch = useDispatch()\n\n    const { fetching, data, error } = result\n    useEffect(() => {\n        if(error){\n            console.log(error)\n        }\n        if (!data) return\n        const measurements = data\n        dispatch(actions.chartMeasurements({ getMeasurements: measurements.getMeasurements }))\n    }, [dispatch, data, error])\n\n\n    const testConsole = () => {\n        if(!data) {\n            return <LinearProgress />\n        } else {\n            // console.log(data.getMeasurements)\n            // console.log(Measurements.Measurements)\n        }\n        \n    }\n\n    const tickFormatter = (ticks: any) => {\n        // <moment />\n        moment(ticks).format()\n        console.log(moment(ticks))\n        // moment(tick).format('HH:mm')\n    }\n\n    const visualData = Measurements.Measurements\n    return(\n        <div>\n            {testConsole()}\n            <ResponsiveContainer width=\"100%\" height={720}>\n                <LineChart margin={{ top: 20, right: 30, left: 0, bottom: 0 }} data={visualData}>\n                    <Line dataKey=\"value\" />\n                    <XAxis dataKey=\"at\" type=\"number\" tickFormatter={ticks => tickFormatter(ticks)} domain={['dataMin', 'dataMax']}/>\n                    <YAxis dataKey=\"value\" />\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    )\n}\n\nexport default () => {\n    return(\n        <ShowChartData />\n    )\n}"]},"metadata":{},"sourceType":"module"}