{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowChartData.tsx\";\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery } from 'urql';\nimport { MEASUREMENTS_QUERY } from './Queries';\n\nvar getLastKnownMeasurement = function getLastKnownMeasurement(state) {\n  var lastMeasurement = state.metric.lastMeasurement;\n  return {\n    lastMeasurement: lastMeasurement\n  };\n};\n\nvar getMeasurements = function getMeasurements(state) {\n  var Measurements = state.metric.Measurements;\n  return {\n    Measurements: Measurements\n  };\n};\n\nvar getSelectedMetrics = function getSelectedMetrics(state) {\n  var selectedMetrics = state.metric.selectedMetrics;\n  return {\n    selectedMetrics: selectedMetrics\n  };\n};\n\nvar ShowChartData = function ShowChartData() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(getLastKnownMeasurement),\n      lastMeasurement = _useSelector.lastMeasurement; // the last metric selected\n\n\n  var _useSelector2 = useSelector(getSelectedMetrics),\n      selectedMetrics = _useSelector2.selectedMetrics; // array of user selected metrics\n\n\n  var Measurements = useSelector(getMeasurements);\n  var visualData = Measurements.Measurements;\n  var timeLimit = new Date();\n  var input = {\n    metricName: lastMeasurement.metric,\n    after: lastMeasurement.at - 1800000,\n    before: timeLimit.getTime() - 10000\n  };\n\n  var whichQuery = function whichQuery(metArray) {\n    var result = {};\n\n    if (metArray.length <= 1) {\n      result = useQuery({\n        query: MEASUREMENTS_QUERY,\n        variables: {\n          input: input\n        },\n        pause: !lastMeasurement.metric\n      });\n    }\n\n    return result;\n  };\n\n  var result = whichQuery(selectedMetrics); // const { data, error } = result\n  // useEffect(() => {\n  //     if(error){\n  //         console.log(error)\n  //     }\n  //     if (!data) return\n  //     const measurements = data\n  //     dispatch(actions.chartMeasurements({ getMeasurements: measurements.getMeasurements }))\n  // }, [dispatch, data, error])\n  // const loadingData = () => {\n  //     if(!data) {\n  //         return <LinearProgress />\n  //     }\n  // }\n  // const tickFormatter = (ticks: any) => {\n  //    return moment(ticks).format('HH:mm')\n  // }\n  // const renderToolTip = (data: any) => {\n  //     if(data.payload[0] !== undefined){\n  //         const toolTipData = (data.payload[0].payload)\n  //         const toolTime = moment(toolTipData.at).format('MMMM do YYYY, h:mm:ss a')\n  //         return(\n  //             <Card>\n  //                 <CardContent>\n  //                     <Typography color=\"textSecondary\">\n  //                         {toolTime}\n  //                     </Typography>\n  //                 </CardContent>\n  //                 <CardContent>\n  //                     {toolTipData.metric}\n  //                 </CardContent>\n  //                 <CardContent>\n  //                     {`${toolTipData.value} ${toolTipData.unit}`}\n  //                 </CardContent>\n  //             </Card>\n  //         )\n  //     }\n  // }\n\n  console.log(result);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  });\n};\n\nexport default (function () {\n  return React.createElement(ShowChartData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  });\n});","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowChartData.tsx"],"names":["React","useSelector","useDispatch","useQuery","MEASUREMENTS_QUERY","getLastKnownMeasurement","state","lastMeasurement","metric","getMeasurements","Measurements","getSelectedMetrics","selectedMetrics","ShowChartData","dispatch","visualData","timeLimit","Date","input","metricName","after","at","before","getTime","whichQuery","metArray","result","length","query","variables","pause","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAiC,OAAjC;AAKA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,MAAzB;AAGA,SAASC,kBAAT,QAAuD,WAAvD;;AAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,KAAD,EAAmB;AAC3C,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAaD,eAArC;AACA,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHL;;AAKA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAEH,KAAF,EAAqB;AACzC,MAAMI,YAAY,GAAGJ,KAAK,CAACE,MAAN,CAAaE,YAAlC;AACA,SAAO;AAAEA,IAAAA,YAAY,EAAZA;AAAF,GAAP;AACH,CAHD;;AAKA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAEL,KAAF,EAAqB;AAC5C,MAAMM,eAAe,GAAGN,KAAK,CAACE,MAAN,CAAaI,eAArC;AACA,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHD;;AAKA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAExB,MAAMC,QAAQ,GAAGZ,WAAW,EAA5B;;AAFwB,qBAGID,WAAW,CAACI,uBAAD,CAHf;AAAA,MAGhBE,eAHgB,gBAGhBA,eAHgB,EAGyC;;;AAHzC,sBAIIN,WAAW,CAACU,kBAAD,CAJf;AAAA,MAIhBC,eAJgB,iBAIhBA,eAJgB,EAIqC;;;AAC7D,MAAOF,YAAY,GAAIT,WAAW,CAACQ,eAAD,CAAlC;AACA,MAAMM,UAAU,GAAGL,YAAY,CAACA,YAAhC;AAEA,MAAMM,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AACA,MAAMC,KAAK,GAAG;AACVC,IAAAA,UAAU,EAAEZ,eAAe,CAACC,MADlB;AAEVY,IAAAA,KAAK,EAAEb,eAAe,CAACc,EAAhB,GAAqB,OAFlB;AAGVC,IAAAA,MAAM,EAAEN,SAAS,CAACO,OAAV,KAAsB;AAHpB,GAAd;;AAMA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAwB;AACvC,QAAIC,MAAM,GAAG,EAAb;;AACA,QAAID,QAAQ,CAACE,MAAT,IAAmB,CAAvB,EAA0B;AACtBD,MAAAA,MAAM,GAAGvB,QAAQ,CAAC;AACdyB,QAAAA,KAAK,EAAExB,kBADO;AAEdyB,QAAAA,SAAS,EAAE;AACPX,UAAAA,KAAK,EAALA;AADO,SAFG;AAKdY,QAAAA,KAAK,EAAE,CAACvB,eAAe,CAACC;AALV,OAAD,CAAjB;AAOH;;AAED,WAAOkB,MAAP;AAEH,GAdD;;AAgBA,MAAMA,MAAM,GAAGF,UAAU,CAACZ,eAAD,CAAzB,CA/BwB,CAkCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEAmB,EAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAmBH,CAnGD;;AAqGA,gBAAe,YAAM;AACjB,SACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAJD","sourcesContent":["import React, { useEffect } from 'react'\nimport moment from 'moment'\n\nimport { IState } from '../../store'\nimport { actions } from './reducer'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useQuery } from 'urql'\nimport { LineChart, Line, XAxis, YAxis, ResponsiveContainer, Tooltip } from 'recharts'\nimport { LinearProgress, Card, CardContent, Typography } from '@material-ui/core'\nimport { MEASUREMENTS_QUERY, GET_MULTIPLE_QUERY } from './Queries'\n\nconst getLastKnownMeasurement = (state: IState) => {\n        const lastMeasurement = state.metric.lastMeasurement\n        return { lastMeasurement }\n    }\n\nconst getMeasurements = ( state: IState ) => {\n    const Measurements = state.metric.Measurements\n    return { Measurements }\n}\n\nconst getSelectedMetrics = ( state: IState ) => {\n    const selectedMetrics = state.metric.selectedMetrics\n    return { selectedMetrics }\n}\n\nconst ShowChartData = () => {\n\n    const dispatch = useDispatch()\n    const { lastMeasurement } = useSelector(getLastKnownMeasurement) // the last metric selected\n    const { selectedMetrics } = useSelector(getSelectedMetrics); // array of user selected metrics\n    const  Measurements  = useSelector(getMeasurements)\n    const visualData = Measurements.Measurements\n\n    const timeLimit = new Date()\n    const input = {\n        metricName: lastMeasurement.metric,\n        after: lastMeasurement.at - 1800000,\n        before: timeLimit.getTime() - 10000,\n    }\n\n    const whichQuery = (metArray: string[]) => {\n        let result = {}\n        if (metArray.length <= 1) {\n            result = useQuery({\n                query: MEASUREMENTS_QUERY,\n                variables: {\n                    input,\n                },\n                pause: !lastMeasurement.metric,\n            })\n        }\n\n        return result\n\n    }\n\n    const result = whichQuery(selectedMetrics)\n    \n\n    // const { data, error } = result\n    // useEffect(() => {\n    //     if(error){\n    //         console.log(error)\n    //     }\n    //     if (!data) return\n    //     const measurements = data\n    //     dispatch(actions.chartMeasurements({ getMeasurements: measurements.getMeasurements }))\n    // }, [dispatch, data, error])\n\n\n    // const loadingData = () => {\n    //     if(!data) {\n    //         return <LinearProgress />\n    //     }\n    // }\n\n    // const tickFormatter = (ticks: any) => {\n    //    return moment(ticks).format('HH:mm')\n    // }\n\n    // const renderToolTip = (data: any) => {\n    //     if(data.payload[0] !== undefined){\n    //         const toolTipData = (data.payload[0].payload)\n    //         const toolTime = moment(toolTipData.at).format('MMMM do YYYY, h:mm:ss a')\n    //         return(\n    //             <Card>\n    //                 <CardContent>\n    //                     <Typography color=\"textSecondary\">\n    //                         {toolTime}\n    //                     </Typography>\n    //                 </CardContent>\n    //                 <CardContent>\n    //                     {toolTipData.metric}\n    //                 </CardContent>\n    //                 <CardContent>\n    //                     {`${toolTipData.value} ${toolTipData.unit}`}\n    //                 </CardContent>\n    //             </Card>\n    //         )\n    //     }\n            \n          \n    // }\n\n    console.log(result)\n    return(\n        <div>\n            {/* {loadingData()} */}\n            {/* <ResponsiveContainer width=\"100%\" height={800}>\n                <LineChart margin={{ bottom: 20 }}data={visualData}>\n                    <Line dataKey=\"value\" type=\"monotone\" animationEasing=\"ease-out\" strokeWidth={4}/>\n                    <XAxis\n                        dataKey=\"at\"\n                        type=\"number\"\n                        interval=\"preserveStart\"\n                        tickFormatter={tickFormatter}\n                        domain={['dataMin', 'dataMax']}   \n                    />\n                    <YAxis dataKey=\"value\" height={10} domain={[ 0, 'dataMax' ]}/>\n                    <Tooltip content={renderToolTip} animationEasing=\"ease-out\" isAnimationActive={true}/>\n                </LineChart>\n            </ResponsiveContainer> */}\n        </div>\n    )\n}\n\nexport default () => {\n    return(\n        <ShowChartData />\n    )\n}"]},"metadata":{},"sourceType":"module"}