{"ast":null,"code":"import { createSlice } from 'redux-starter-kit';\nvar initialState = {\n  metrics: [],\n  selectedMetrics: [],\n  lastMeasurement: {\n    metric: \"\",\n    at: 0,\n    value: 0.0,\n    unit: \"\"\n  },\n  Measurements: [],\n  selectedMetricsAndMeasurements: []\n};\nvar slice = createSlice({\n  name: 'metric',\n  initialState: initialState,\n  reducers: {\n    metricTypesReceived: function metricTypesReceived(state, action) {\n      var metricArray = action.payload.metricArray;\n      state.metrics = metricArray;\n    },\n    selectedMetrics: function selectedMetrics(state, action) {\n      var selectedMetrics = action.payload.selectedMetrics;\n      state.selectedMetrics = selectedMetrics;\n    },\n    selectedMetricsAndMeasurements: function selectedMetricsAndMeasurements(state, action) {\n      var selectedMetricsAndMeasurements = action.payload.selectedMetricsAndMeasurements;\n      state.selectedMetricsAndMeasurements = selectedMetricsAndMeasurements;\n    },\n    lastMeasurement: function lastMeasurement(state, action) {\n      var _action$payload = action.payload,\n          metric = _action$payload.metric,\n          at = _action$payload.at,\n          value = _action$payload.value,\n          unit = _action$payload.unit;\n      state.lastMeasurement.metric = metric;\n      state.lastMeasurement.at = at;\n      state.lastMeasurement.value = value;\n      state.lastMeasurement.unit = unit;\n    },\n    chartMeasurements: function chartMeasurements(state, action) {\n      var getMeasurements = action.payload.getMeasurements;\n      state.Measurements = getMeasurements;\n    },\n    metricApiErrorReceived: function metricApiErrorReceived(state, action) {\n      return state;\n    }\n  }\n});\nexport var reducer = slice.reducer;\nexport var actions = slice.actions;","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/reducer.ts"],"names":["createSlice","initialState","metrics","selectedMetrics","lastMeasurement","metric","at","value","unit","Measurements","selectedMetricsAndMeasurements","slice","name","reducers","metricTypesReceived","state","action","metricArray","payload","chartMeasurements","getMeasurements","metricApiErrorReceived","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA2C,mBAA3C;AA8BA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,EADQ;AAEjBC,EAAAA,eAAe,EAAE,EAFA;AAGjBC,EAAAA,eAAe,EAAE;AACbC,IAAAA,MAAM,EAAE,EADK;AAEbC,IAAAA,EAAE,EAAE,CAFS;AAGbC,IAAAA,KAAK,EAAE,GAHM;AAIbC,IAAAA,IAAI,EAAE;AAJO,GAHA;AASjBC,EAAAA,YAAY,EAAE,EATG;AAUjBC,EAAAA,8BAA8B,EAAE;AAVf,CAArB;AAaA,IAAMC,KAAK,GAAGX,WAAW,CAAC;AACtBY,EAAAA,IAAI,EAAE,QADgB;AAEtBX,EAAAA,YAAY,EAAZA,YAFsB;AAGtBY,EAAAA,QAAQ,EAAE;AACNC,IAAAA,mBAAmB,EAAE,6BAACC,KAAD,EAAQC,MAAR,EAAmD;AAAA,UAC5DC,WAD4D,GAC5CD,MAAM,CAACE,OADqC,CAC5DD,WAD4D;AAEpEF,MAAAA,KAAK,CAACb,OAAN,GAAgBe,WAAhB;AAEH,KALK;AAMNd,IAAAA,eAAe,EAAE,yBAACY,KAAD,EAAQC,MAAR,EAAmD;AAAA,UACxDb,eADwD,GACpCa,MAAM,CAACE,OAD6B,CACxDf,eADwD;AAEhEY,MAAAA,KAAK,CAACZ,eAAN,GAAwBA,eAAxB;AACH,KATK;AAUNO,IAAAA,8BAA8B,EAAE,wCAACK,KAAD,EAAQC,MAAR,EAAkE;AAAA,UACtFN,8BADsF,GACnDM,MAAM,CAACE,OAD4C,CACtFR,8BADsF;AAE9FK,MAAAA,KAAK,CAACL,8BAAN,GAAuCA,8BAAvC;AACH,KAbK;AAcNN,IAAAA,eAAe,EAAE,yBAACW,KAAD,EAAQC,MAAR,EAAwD;AAAA,4BACjCA,MAAM,CAACE,OAD0B;AAAA,UAC7Db,MAD6D,mBAC7DA,MAD6D;AAAA,UACrDC,EADqD,mBACrDA,EADqD;AAAA,UACjDC,KADiD,mBACjDA,KADiD;AAAA,UAC1CC,IAD0C,mBAC1CA,IAD0C;AAErEO,MAAAA,KAAK,CAACX,eAAN,CAAsBC,MAAtB,GAA+BA,MAA/B;AACAU,MAAAA,KAAK,CAACX,eAAN,CAAsBE,EAAtB,GAA2BA,EAA3B;AACAS,MAAAA,KAAK,CAACX,eAAN,CAAsBG,KAAtB,GAA8BA,KAA9B;AACAQ,MAAAA,KAAK,CAACX,eAAN,CAAsBI,IAAtB,GAA6BA,IAA7B;AACH,KApBK;AAqBNW,IAAAA,iBAAiB,EAAE,2BAACJ,KAAD,EAAQC,MAAR,EAAgD;AAAA,UACvDI,eADuD,GACnCJ,MAAM,CAACE,OAD4B,CACvDE,eADuD;AAE/DL,MAAAA,KAAK,CAACN,YAAN,GAAqBW,eAArB;AACH,KAxBK;AAyBNC,IAAAA,sBAAsB,EAAE,gCAACN,KAAD,EAAQC,MAAR;AAAA,aAAmDD,KAAnD;AAAA;AAzBlB;AAHY,CAAD,CAAzB;AAgCA,OAAO,IAAMO,OAAO,GAAGX,KAAK,CAACW,OAAtB;AACP,OAAO,IAAMC,OAAO,GAAGZ,KAAK,CAACY,OAAtB","sourcesContent":["import { createSlice, PayloadAction } from 'redux-starter-kit';\n\nexport type MetricSelection = {\n    metricArray: string[]\n}\n\nexport type selectedMetrics = {\n    selectedMetrics: string[]\n}\n\nexport type selectedMetricsAndMeasurements = {\n    selectedMetricsAndMeasurements: any[]\n}\n\nexport type LastKnownMeasurement = {\n        metric: string,\n        at: number,\n        value: number,\n        unit: string\n}\n\nexport type Measurements = {\n    getMeasurements: Object[]\n}\n\n\nexport type ApiErrorAction = {\n    error: string;\n}\n\nconst initialState = {\n    metrics: [] as string[],\n    selectedMetrics: [] as string[],\n    lastMeasurement: {\n        metric: \"\",\n        at: 0,\n        value: 0.0,\n        unit: \"\"\n    },\n    Measurements: [] as Object[],\n    selectedMetricsAndMeasurements: [] as any[]\n}\n\nconst slice = createSlice({\n    name: 'metric',\n    initialState,\n    reducers: {\n        metricTypesReceived: (state, action: PayloadAction<MetricSelection>) => {\n            const { metricArray } = action.payload;\n            state.metrics = metricArray;\n            \n        },\n        selectedMetrics: (state, action: PayloadAction<selectedMetrics>) => {\n            const { selectedMetrics } = action.payload;\n            state.selectedMetrics = selectedMetrics\n        },\n        selectedMetricsAndMeasurements: (state, action: PayloadAction<selectedMetricsAndMeasurements>) => {\n            const { selectedMetricsAndMeasurements } = action.payload;\n            state.selectedMetricsAndMeasurements = selectedMetricsAndMeasurements;\n        },\n        lastMeasurement: (state, action: PayloadAction<LastKnownMeasurement>) => {\n            const { metric, at, value, unit } = action.payload;\n            state.lastMeasurement.metric = metric;\n            state.lastMeasurement.at = at;\n            state.lastMeasurement.value = value;\n            state.lastMeasurement.unit = unit;\n        },\n        chartMeasurements: (state, action: PayloadAction<Measurements>) => {\n            const { getMeasurements } = action.payload;\n            state.Measurements = getMeasurements;\n        },\n        metricApiErrorReceived: (state, action: PayloadAction<ApiErrorAction> ) => state,\n    },\n})\n\nexport const reducer = slice.reducer\nexport const actions = slice.actions"]},"metadata":{},"sourceType":"module"}