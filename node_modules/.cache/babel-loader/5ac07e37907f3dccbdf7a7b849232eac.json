{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowData.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { actions } from './reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useQuery, Provider } from 'urql';\nimport Graph from './Graph';\nimport { LAST_KNOWN_MEASUREMENT_QUERY, CLIENT } from './Queries';\n\nvar getMetric = function getMetric(state) {\n  var selectedMetrics = state.metric.selectedMetrics;\n  return {\n    selectedMetrics: selectedMetrics\n  };\n};\n\nvar ShowData = function ShowData() {\n  var dispatch = useDispatch();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 1),\n      selectedMetricsArray = _useState2[0];\n\n  var metricsObjectArray = useSelector(getMetric);\n  var metricsArray = metricsObjectArray.selectedMetrics;\n  var lastKnownMetric = metricsArray[metricsArray.length - 1];\n\n  var _useQuery = useQuery({\n    query: LAST_KNOWN_MEASUREMENT_QUERY,\n    variables: {\n      metricName: lastKnownMetric\n    },\n    pause: !lastKnownMetric,\n    pollInterval: 1000,\n    requestPolicy: 'network-only'\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var data = result.data,\n      error = result.error;\n  useEffect(function () {\n    if (error) {\n      dispatch(actions.metricApiErrorReceived({\n        error: error.message\n      }));\n    }\n\n    if (!data) return;\n    var getLastKnownMeasurement = data.getLastKnownMeasurement;\n    selectedMetricsArray.push(getLastKnownMeasurement);\n    dispatch(actions.lastMeasurement(getLastKnownMeasurement));\n  }, [dispatch, data, error]);\n\n  var dispatchSelectedMetrics = function dispatchSelectedMetrics(selectedMetrics) {\n    return dispatch(actions.selectedMetricsAndMeasurements(selectedMetrics));\n  };\n\n  var showGraph = function showGraph() {\n    if (metricsArray.length > 0) {\n      return React.createElement(Graph, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    } else {\n      return;\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, showGraph());\n};\n\nexport default (function () {\n  return React.createElement(Provider, {\n    value: CLIENT,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(ShowData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowData.tsx"],"names":["React","useEffect","useState","actions","useDispatch","useSelector","useQuery","Provider","Graph","LAST_KNOWN_MEASUREMENT_QUERY","CLIENT","getMetric","state","selectedMetrics","metric","ShowData","dispatch","selectedMetricsArray","metricsObjectArray","metricsArray","lastKnownMetric","length","query","variables","metricName","pause","pollInterval","requestPolicy","result","data","error","metricApiErrorReceived","message","getLastKnownMeasurement","push","lastMeasurement","dispatchSelectedMetrics","selectedMetricsAndMeasurements","showGraph"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,MAAnC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,4BAAT,EAAuCC,MAAvC,QAAqD,WAArD;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAmB;AAAA,MACzBC,eADyB,GACLD,KAAK,CAACE,MADD,CACzBD,eADyB;AAEjC,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHD;;AAKA,IAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAEnB,MAAMC,QAAQ,GAAGZ,WAAW,EAA5B;;AAFmB,kBAGYF,QAAQ,CAAC,EAAD,CAHpB;AAAA;AAAA,MAGZe,oBAHY;;AAInB,MAAMC,kBAAkB,GAAGb,WAAW,CAACM,SAAD,CAAtC;AACA,MAAMQ,YAAY,GAAGD,kBAAkB,CAACL,eAAxC;AACA,MAAMO,eAAe,GAAGD,YAAY,CAACA,YAAY,CAACE,MAAb,GAAsB,CAAvB,CAApC;;AANmB,kBASFf,QAAQ,CAAC;AACtBgB,IAAAA,KAAK,EAAEb,4BADe;AAEtBc,IAAAA,SAAS,EAAE;AACPC,MAAAA,UAAU,EAAEJ;AADL,KAFW;AAKtBK,IAAAA,KAAK,EAAE,CAACL,eALc;AAMtBM,IAAAA,YAAY,EAAE,IANQ;AAOtBC,IAAAA,aAAa,EAAE;AAPO,GAAD,CATN;AAAA;AAAA,MASZC,MATY;;AAAA,MAmBXC,IAnBW,GAmBID,MAnBJ,CAmBXC,IAnBW;AAAA,MAmBLC,KAnBK,GAmBIF,MAnBJ,CAmBLE,KAnBK;AAoBnB7B,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAG6B,KAAH,EAAS;AACLd,MAAAA,QAAQ,CAACb,OAAO,CAAC4B,sBAAR,CAA+B;AAAED,QAAAA,KAAK,EAAEA,KAAK,CAACE;AAAf,OAA/B,CAAD,CAAR;AACH;;AACD,QAAI,CAACH,IAAL,EAAW;AAJC,QAKJI,uBALI,GAKwBJ,IALxB,CAKJI,uBALI;AAMZhB,IAAAA,oBAAoB,CAACiB,IAArB,CAA2BD,uBAA3B;AACAjB,IAAAA,QAAQ,CAACb,OAAO,CAACgC,eAAR,CAAwBF,uBAAxB,CAAD,CAAR;AACH,GARQ,EAQN,CAACjB,QAAD,EAAWa,IAAX,EAAiBC,KAAjB,CARM,CAAT;;AAUA,MAAMM,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACvB,eAAD,EAA0B;AACtD,WAAOG,QAAQ,CAACb,OAAO,CAACkC,8BAAR,CAAuCxB,eAAvC,CAAD,CAAf;AACH,GAFD;;AAIA,MAAMyB,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,QAAGnB,YAAY,CAACE,MAAb,GAAsB,CAAzB,EAA2B;AACvB,aAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFD,MAEO;AACH;AACH;AACJ,GAND;;AAQA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKiB,SAAS,EADd,CADJ;AAKH,CA/CD;;AAmDA,gBAAe,YAAM;AACjB,SACI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE5B,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAND","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { IState } from '../../store'\nimport { actions } from './reducer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useQuery, Provider } from 'urql'\nimport Graph from './Graph'\nimport { LAST_KNOWN_MEASUREMENT_QUERY, CLIENT } from './Queries'\n\nconst getMetric = (state: IState) => {\n    const { selectedMetrics } = state.metric\n    return { selectedMetrics }\n}\n\nconst ShowData = () => {\n\n    const dispatch = useDispatch()\n    const [selectedMetricsArray] = useState([] as any)\n    const metricsObjectArray = useSelector(getMetric)\n    const metricsArray = metricsObjectArray.selectedMetrics\n    const lastKnownMetric = metricsArray[metricsArray.length - 1]\n\n\n    const [result] = useQuery({\n        query: LAST_KNOWN_MEASUREMENT_QUERY,\n        variables: {\n            metricName: lastKnownMetric,\n        },\n        pause: !lastKnownMetric,\n        pollInterval: 1000,\n        requestPolicy: 'network-only',\n    })\n\n    const { data, error} = result\n    useEffect(() => {\n        if(error){\n            dispatch(actions.metricApiErrorReceived({ error: error.message}))\n        }\n        if (!data) return\n        const { getLastKnownMeasurement } = data\n        selectedMetricsArray.push( getLastKnownMeasurement )\n        dispatch(actions.lastMeasurement(getLastKnownMeasurement))\n    }, [dispatch, data, error])\n\n    const dispatchSelectedMetrics = (selectedMetrics: any) => {\n        return dispatch(actions.selectedMetricsAndMeasurements(selectedMetrics))\n    }\n\n    const showGraph = () => {\n        if(metricsArray.length > 0){\n            return <Graph />\n        } else {\n            return \n        }\n    }\n    \n    return(\n        <div>\n            {showGraph()}\n        </div>\n    )\n}\n\n\n\nexport default () => {\n    return(\n        <Provider value={CLIENT}>\n            <ShowData />\n        </Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}