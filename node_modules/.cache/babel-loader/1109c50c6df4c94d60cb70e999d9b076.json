{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowChartData.tsx\";\nimport React, { useEffect } from 'react';\nimport { actions } from './reducer';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery } from 'urql';\nimport { LineChart, Line, XAxis, YAxis } from 'recharts';\nvar MEASUREMENTS_QUERY = \"\\n   query($input: MeasurementQuery){\\n       getMeasurements(input: $input){\\n           metric\\n           at\\n           value\\n           unit\\n       }\\n   }\\n\";\n\nvar getLastKnownMeasurement = function getLastKnownMeasurement(state) {\n  var lastMeasurement = state.metric.lastMeasurement;\n  return {\n    lastMeasurement: lastMeasurement\n  };\n};\n\nvar getMeasurements = function getMeasurements(state) {\n  var Measurements = state.metric.Measurements;\n  return {\n    Measurements: Measurements\n  };\n};\n\nvar ShowChartData = function ShowChartData() {\n  var _useSelector = useSelector(getLastKnownMeasurement),\n      lastMeasurement = _useSelector.lastMeasurement;\n\n  var _useSelector2 = useSelector(getMeasurements),\n      Measurements = _useSelector2.Measurements;\n\n  var timeLimit = new Date().getTime();\n  var input = {\n    metricName: lastMeasurement.metric,\n    after: lastMeasurement.at,\n    before: timeLimit - 45\n  };\n\n  var _useQuery = useQuery({\n    query: MEASUREMENTS_QUERY,\n    variables: {\n      input: input\n    },\n    pause: !lastMeasurement.metric // pollInterval: 5000,\n    // requestPolicy: 'cache-and-network',\n\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var dispatch = useDispatch();\n  var fetching = result.fetching,\n      data = result.data,\n      error = result.error;\n  useEffect(function () {\n    if (error) {\n      console.log(error);\n    }\n\n    if (!data) return;\n    var measurements = data;\n    dispatch(actions.chartMeasurements({\n      getMeasurements: measurements\n    }));\n  }, [dispatch, data, error]); // const data = Measurements\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(LineChart, {\n    width: 800,\n    height: 600,\n    data: data,\n    margin: {\n      right: 30\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Line, {\n    dataKey: \"value\",\n    stroke: \"#8884d8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    dataKey: \"at\",\n    type: \"number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(YAxis, {\n    dataKey: \"value\",\n    type: \"number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })));\n};\n\nexport default (function () {\n  return React.createElement(ShowChartData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  });\n});","map":{"version":3,"sources":["/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowChartData.tsx"],"names":["React","useEffect","actions","useSelector","useDispatch","useQuery","LineChart","Line","XAxis","YAxis","MEASUREMENTS_QUERY","getLastKnownMeasurement","state","lastMeasurement","metric","getMeasurements","Measurements","ShowChartData","timeLimit","Date","getTime","input","metricName","after","at","before","query","variables","pause","result","dispatch","fetching","data","error","console","log","measurements","chartMeasurements","right"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { IState } from '../../store'\nimport { actions } from './reducer'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useQuery } from 'urql'\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts'\n\nconst MEASUREMENTS_QUERY = `\n   query($input: MeasurementQuery){\n       getMeasurements(input: $input){\n           metric\n           at\n           value\n           unit\n       }\n   }\n`\n\nconst getLastKnownMeasurement = (state: IState) => {\n        const lastMeasurement = state.metric.lastMeasurement\n        return { lastMeasurement }\n    }\n\nconst getMeasurements = ( state: IState ) => {\n    const Measurements = state.metric.Measurements\n    return { Measurements }\n}\n\nconst ShowChartData = () => {\n\n    const { lastMeasurement } = useSelector(getLastKnownMeasurement)\n    const { Measurements } = useSelector(getMeasurements)\n    const timeLimit = new Date().getTime()\n    const input = {\n        metricName: lastMeasurement.metric,\n        after: lastMeasurement.at,\n        before: timeLimit - 45,\n    }\n\n    const [result] = useQuery({\n        query: MEASUREMENTS_QUERY,\n        variables: {\n            input,\n        },\n        pause: !lastMeasurement.metric,\n        // pollInterval: 5000,\n        // requestPolicy: 'cache-and-network',\n    })\n\n    const dispatch = useDispatch()\n\n    const { fetching, data, error } = result\n    useEffect(() => {\n        if(error){\n            console.log(error)\n        }\n        if (!data) return\n        const measurements = data\n        dispatch(actions.chartMeasurements({ getMeasurements: measurements }))\n    }, [dispatch, data, error])\n\n    // const data = Measurements\n\n    return(\n        <div>\n            <LineChart width={800} height={600} data={data} margin={{ right: 30}}>\n                <Line dataKey=\"value\" stroke=\"#8884d8\"/>\n                <XAxis dataKey=\"at\" type=\"number\"/>\n                <YAxis dataKey=\"value\" type=\"number\"/>\n            </LineChart>\n        </div>\n    )\n}\n\nexport default () => {\n    return(\n        <ShowChartData />\n    )\n}"]},"metadata":{},"sourceType":"module"}