{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowChartData.tsx\";\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nvar MEASUREMENTS_QUERY = \"\\n   query($input: MeasurementQuery){\\n       getMeasurements(input: $input){\\n           metric\\n           at\\n           value\\n           unit\\n       }\\n   }\\n\";\n\nvar getLastKnownMeasurement = function getLastKnownMeasurement(state) {\n  var lastMeasurement = state.metric.lastMeasurement;\n  return {\n    lastMeasurement: lastMeasurement\n  };\n};\n\nvar ShowChartData = function ShowChartData() {\n  var _useSelector = useSelector(getLastKnownMeasurement),\n      lastMeasurement = _useSelector.lastMeasurement; // const input = {\n  //     metricName: lastMeasurement.metric,\n  //     after: lastMeasurement.at,\n  //     before: \n  // }\n  // const [result] = useQuery({\n  //     query: MEASUREMENTS_QUERY,\n  //     variables: {\n  //         input,\n  //     },\n  //     pause: !lastMeasurement.metric,\n  //     pollInterval: 5000,\n  //     requestPolicy: 'cache-and-network',\n  // })\n\n\n  var now = new Date().getHours();\n  console.log(now);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  });\n};\n\nexport default (function () {\n  return React.createElement(ShowChartData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  });\n});","map":{"version":3,"sources":["/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowChartData.tsx"],"names":["React","useSelector","MEASUREMENTS_QUERY","getLastKnownMeasurement","state","lastMeasurement","metric","ShowChartData","now","Date","getHours","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAGA,IAAMC,kBAAkB,yKAAxB;;AAWA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,KAAD,EAAmB;AAC3C,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAaD,eAArC;AACA,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHL;;AAKA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,qBAEIN,WAAW,CAACE,uBAAD,CAFf;AAAA,MAEhBE,eAFgB,gBAEhBA,eAFgB,EAGxB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,GAAG,GAAG,IAAIC,IAAJ,GAAWC,QAAX,EAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAKH,CA1BD;;AA4BA,gBAAe,YAAM;AACjB,SACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAJD","sourcesContent":["import React from 'react'\nimport { IState } from '../../store'\nimport { useSelector } from 'react-redux'\nimport { useQuery } from 'urql'\n\nconst MEASUREMENTS_QUERY = `\n   query($input: MeasurementQuery){\n       getMeasurements(input: $input){\n           metric\n           at\n           value\n           unit\n       }\n   }\n`\n\nconst getLastKnownMeasurement = (state: IState) => {\n        const lastMeasurement = state.metric.lastMeasurement\n        return { lastMeasurement }\n    }\n\nconst ShowChartData = () => {\n\n    const { lastMeasurement } = useSelector(getLastKnownMeasurement)\n    // const input = {\n    //     metricName: lastMeasurement.metric,\n    //     after: lastMeasurement.at,\n    //     before: \n    // }\n\n    // const [result] = useQuery({\n    //     query: MEASUREMENTS_QUERY,\n    //     variables: {\n    //         input,\n    //     },\n    //     pause: !lastMeasurement.metric,\n    //     pollInterval: 5000,\n    //     requestPolicy: 'cache-and-network',\n    // })\n\n    const now = new Date().getHours()\n    console.log(now)\n    return(\n        <div>\n\n        </div>\n    )\n}\n\nexport default () => {\n    return(\n        <ShowChartData />\n    )\n}"]},"metadata":{},"sourceType":"module"}