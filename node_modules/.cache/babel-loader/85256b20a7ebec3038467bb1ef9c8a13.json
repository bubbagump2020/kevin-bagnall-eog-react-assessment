{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/MetricSelection.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { FormControl, MenuItem, Select } from \"@material-ui/core\";\nimport { actions } from \"./reducer\";\nimport { Provider, useQuery } from \"urql\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Chip from \"../../components/Chip\";\nimport ShowData from \"./ShowData\";\nimport { GET_METRICS_QUERY, CLIENT } from \"./Queries\";\n\nvar getOptions = function getOptions(state) {\n  var metrics = state.metric.metrics;\n  return {\n    metrics: metrics\n  };\n};\n\nvar MetricSelection = function MetricSelection() {\n  var _useQuery = useQuery({\n    query: GET_METRICS_QUERY\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var dispatch = useDispatch();\n  var data = result.data,\n      fetching = result.fetching,\n      error = result.error;\n\n  var _useSelector = useSelector(getOptions),\n      metrics = _useSelector.metrics;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedMetrics = _useState2[0],\n      setSelectedMetrics = _useState2[1];\n\n  useEffect(function () {\n    if (error) {\n      dispatch(actions.metricApiErrorReceived({\n        error: error.message\n      }));\n    }\n\n    if (!data) return;\n    dispatch(actions.metricTypesReceived({\n      metricArray: data.getMetrics\n    }));\n  }, [dispatch, data, error]);\n\n  var showMetricOptions = function showMetricOptions() {\n    if (!data || metrics.length === 0) {} else {\n      return metrics.map(function (metric) {\n        return React.createElement(MenuItem, {\n          key: metric,\n          value: metric,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, metric);\n      });\n    }\n  };\n\n  var handleChange = function handleChange(event) {\n    setSelectedMetrics(event.target.value);\n    dispatch(actions.selectedMetrics({\n      selectedMetrics: event.target.value\n    }));\n  };\n\n  if (fetching) return React.createElement(Chip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Select, {\n    onChange: handleChange,\n    value: selectedMetrics,\n    multiple: true,\n    renderValue: function renderValue(selected) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, selected.map(function (value) {\n        return React.createElement(Chip, {\n          key: value,\n          label: value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        });\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, showMetricOptions())), React.createElement(ShowData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }));\n};\n\nexport default (function () {\n  return React.createElement(Provider, {\n    value: CLIENT,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(MetricSelection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/MetricSelection.tsx"],"names":["React","useEffect","useState","FormControl","MenuItem","Select","actions","Provider","useQuery","useDispatch","useSelector","Chip","ShowData","GET_METRICS_QUERY","CLIENT","getOptions","state","metrics","metric","MetricSelection","query","result","dispatch","data","fetching","error","selectedMetrics","setSelectedMetrics","metricApiErrorReceived","message","metricTypesReceived","metricArray","getMetrics","showMetricOptions","length","map","handleChange","event","target","value","selected"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { FormControl, MenuItem, Select } from \"@material-ui/core\";\nimport { actions } from \"./reducer\";\nimport { Provider, useQuery } from \"urql\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { IState } from \"../../store\";\nimport Chip from \"../../components/Chip\";\nimport ShowData from \"./ShowData\";\nimport { GET_METRICS_QUERY, CLIENT } from \"./Queries\";\n\nconst getOptions = (state: IState) => {\n  const { metrics } = state.metric;\n  return { metrics };\n};\n\nconst MetricSelection = () => {\n  const [result] = useQuery({\n    query: GET_METRICS_QUERY\n  });\n\n  const dispatch = useDispatch();\n  const { data, fetching, error } = result;\n  const { metrics } = useSelector(getOptions);\n  const [selectedMetrics, setSelectedMetrics] = useState([]);\n\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.metricApiErrorReceived({ error: error.message }));\n    }\n    if (!data) return;\n    dispatch(actions.metricTypesReceived({ metricArray: data.getMetrics }));\n  }, [dispatch, data, error]);\n\n  const showMetricOptions = () => {\n    if (!data || metrics.length === 0) {\n    } else {\n      return metrics.map((metric: string) => {\n        return (\n          <MenuItem key={metric} value={metric}>\n            {metric}\n          </MenuItem>\n        );\n      });\n    }\n  };\n\n  const handleChange = (event: any) => {\n    setSelectedMetrics(event.target.value);\n    dispatch(actions.selectedMetrics({ selectedMetrics: event.target.value }));\n  };\n\n  if (fetching) return <Chip />;\n\n  return (\n    <div>\n      <FormControl>\n        <Select\n          onChange={handleChange}\n          value={selectedMetrics}\n          multiple\n          renderValue={(selected: any) => (\n            <div>\n              {selected.map((value: any) => (\n                <Chip key={value} label={value} />\n              ))}\n            </div>\n          )}\n        >\n          {showMetricOptions()}\n        </Select>\n      </FormControl>\n      <ShowData />\n    </div>\n  );\n};\n\nexport default () => {\n  return (\n    <Provider value={CLIENT}>\n      <MetricSelection />\n    </Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}