{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowMultiple.tsx\";\nimport React from 'react';\n\nvar getSelectedMetrics = function getSelectedMetrics(state) {\n  var selectedMetrics = state.metric.selectedMetrics;\n  return {\n    selectedMetrics: selectedMetrics\n  };\n};\n\nvar getLastKnownMeasurement = function getLastKnownMeasurement(state) {\n  var lastMeasurement = state.metric.lastMeasurement;\n  return {\n    lastMeasurement: lastMeasurement\n  };\n};\n\nvar ShowMultiple = function ShowMultiple() {\n  // const { selectedMetrics } = useSelector(getSelectedMetrics)\n  // const { lastMeasurement } = useSelector(getLastKnownMeasurement)\n  // const timeLimit = new Date()\n  // const input = {\n  //     metric: lastMeasurement.metric,\n  //     measurements: {\n  //         metricName: lastMeasurement.metric,\n  //         after: lastMeasurement.at - 1800000,\n  //         before: timeLimit.getTime() - 10000,\n  //     } \n  // }\n  // const [result] = useQuery({\n  //     query: GET_MULTIPLE_QUERY,\n  //     variables: {\n  //         input,\n  //     },\n  //     pause: !lastMeasurement.metric,\n  // })\n  // const showMultiLines = () => {\n  //     return selectedMetrics.map(metric => {\n  //         return(\n  //             <div>\n  //                 {/* <Line datakey=\"value\">\n  //                 </Line> */}\n  //             </div>\n  //         )\n  //     })\n  // console.log(result.error)\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  });\n};\n\nexport default ShowMultiple;","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowMultiple.tsx"],"names":["React","getSelectedMetrics","state","selectedMetrics","metric","getLastKnownMeasurement","lastMeasurement","ShowMultiple"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;;AAOA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAEC,KAAF,EAAqB;AAC5C,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAaD,eAArC;AACA,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHD;;AAIA,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACH,KAAD,EAAmB;AAC/C,MAAMI,eAAe,GAAGJ,KAAK,CAACE,MAAN,CAAaE,eAArC;AACA,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHD;;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAEvB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAKH,CAzCD;;AA2CA,eAAeA,YAAf","sourcesContent":["import React, { useState } from 'react'\nimport { IState } from '../../store'\nimport { useSelector } from 'react-redux'\nimport { Line } from 'recharts'\nimport { useQuery } from 'urql'\nimport { GET_MULTIPLE_QUERY } from './Queries'\n\nconst getSelectedMetrics = ( state: IState ) => {\n    const selectedMetrics = state.metric.selectedMetrics\n    return { selectedMetrics }\n}\nconst getLastKnownMeasurement = (state: IState) => {\n    const lastMeasurement = state.metric.lastMeasurement\n    return { lastMeasurement }\n}\n\nconst ShowMultiple = () => {\n\n    // const { selectedMetrics } = useSelector(getSelectedMetrics)\n    // const { lastMeasurement } = useSelector(getLastKnownMeasurement)\n    // const timeLimit = new Date()\n\n    // const input = {\n    //     metric: lastMeasurement.metric,\n    //     measurements: {\n    //         metricName: lastMeasurement.metric,\n    //         after: lastMeasurement.at - 1800000,\n    //         before: timeLimit.getTime() - 10000,\n    //     } \n    // }\n\n    // const [result] = useQuery({\n    //     query: GET_MULTIPLE_QUERY,\n    //     variables: {\n    //         input,\n    //     },\n    //     pause: !lastMeasurement.metric,\n    // })\n    // const showMultiLines = () => {\n    //     return selectedMetrics.map(metric => {\n    //         return(\n    //             <div>\n    //                 {/* <Line datakey=\"value\">\n\n    //                 </Line> */}\n    //             </div>\n    //         )\n    //     })\n    \n\n    // console.log(result.error)\n\n    return(\n        <div>\n  \n        </div>\n    )\n}\n\nexport default ShowMultiple;"]},"metadata":{},"sourceType":"module"}