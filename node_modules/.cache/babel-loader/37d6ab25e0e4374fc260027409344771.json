{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Weather/Weather.tsx\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from './reducer';\nimport { Provider, createClient, useQuery } from 'urql';\nimport { useGeolocation } from 'react-use';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Chip from '../../components/Chip';\nvar client = createClient({\n  url: 'https://react.eogresources.com/graphql'\n});\nvar query = \"\\nquery($latLong: WeatherQuery!) {\\n  getWeatherForLocation(latLong: $latLong) {\\n    description\\n    locationName\\n    temperatureinCelsius\\n  }\\n}\\n\";\n\nvar getWeather = function getWeather(state) {\n  var _state$weather = state.weather,\n      temperatureinFahrenheit = _state$weather.temperatureinFahrenheit,\n      description = _state$weather.description,\n      locationName = _state$weather.locationName;\n  return {\n    temperatureinFahrenheit: temperatureinFahrenheit,\n    description: description,\n    locationName: locationName\n  };\n};\n\nexport default (function () {\n  return React.createElement(Provider, {\n    value: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Weather, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }));\n});\n\nvar Weather = function Weather() {\n  var getLocation = useGeolocation(); // Default to houston\n\n  var latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698\n  };\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(getWeather),\n      temperatureinFahrenheit = _useSelector.temperatureinFahrenheit,\n      description = _useSelector.description,\n      locationName = _useSelector.locationName;\n\n  var _useQuery = useQuery({\n    query: query,\n    variables: {\n      latLong: latLong\n    }\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var fetching = result.fetching,\n      data = result.data,\n      error = result.error;\n  useEffect(function () {\n    if (error) {\n      dispatch(actions.weatherApiErrorReceived({\n        error: error.message\n      }));\n      return;\n    }\n\n    if (!data) return;\n    var getWeatherForLocation = data.getWeatherForLocation;\n    dispatch(actions.weatherDataRecevied(getWeatherForLocation));\n  }, [dispatch, data, error]);\n  if (fetching) return React.createElement(LinearProgress, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  });\n  return React.createElement(Chip, {\n    label: \"Weather in \".concat(locationName, \": \").concat(description, \" and \").concat(temperatureinFahrenheit, \"\\xB0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Weather/Weather.tsx"],"names":["React","useEffect","useDispatch","useSelector","actions","Provider","createClient","useQuery","useGeolocation","LinearProgress","Chip","client","url","query","getWeather","state","weather","temperatureinFahrenheit","description","locationName","Weather","getLocation","latLong","latitude","longitude","dispatch","variables","result","fetching","data","error","weatherApiErrorReceived","message","getWeatherForLocation","weatherDataRecevied"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from './reducer';\nimport { Provider, createClient, useQuery } from 'urql';\nimport { useGeolocation } from 'react-use';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Chip from '../../components/Chip';\nimport { IState } from '../../store';\n\nconst client = createClient({\n  url: 'https://react.eogresources.com/graphql',\n});\n\nconst query = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`;\n\nconst getWeather = (state: IState) => {\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\n  return {\n    temperatureinFahrenheit,\n    description,\n    locationName,\n  };\n};\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <Weather />\n    </Provider>\n  );\n};\n\nconst Weather = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698,\n  };\n  const dispatch = useDispatch();\n  const { temperatureinFahrenheit, description, locationName } = useSelector(getWeather);\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      latLong,\n    },\n  });\n  const { fetching, data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.weatherApiErrorReceived({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n    const { getWeatherForLocation } = data;\n    dispatch(actions.weatherDataRecevied(getWeatherForLocation));\n  }, [dispatch, data, error]);\n\n  if (fetching) return <LinearProgress />;\n\n  return <Chip label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}Â°`} />;\n};\n"]},"metadata":{},"sourceType":"module"}