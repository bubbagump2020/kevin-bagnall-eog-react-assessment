{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowMultiple.tsx\";\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nvar getSelectedMetrics = function getSelectedMetrics(state) {\n  var selectedMetrics = state.metric.selectedMetrics;\n  return {\n    selectedMetrics: selectedMetrics\n  };\n};\n\nvar getLastKnownMeasurement = function getLastKnownMeasurement(state) {\n  var lastMeasurement = state.metric.lastMeasurement;\n  return {\n    lastMeasurement: lastMeasurement\n  };\n};\n\nvar ShowMultiple = function ShowMultiple() {\n  var _useSelector = useSelector(getSelectedMetrics),\n      selectedMetrics = _useSelector.selectedMetrics;\n\n  var _useSelector2 = useSelector(getLastKnownMeasurement),\n      lastMeasurement = _useSelector2.lastMeasurement;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      measurementArray = _useState2[0],\n      setMeasurementArray = _useState2[1];\n\n  var timeLimit = new Date();\n  var dataInput = {\n    after: lastMeasurement.at - 1800000,\n    before: timeLimit.getTime() - 10000\n  }; // how to create the array of input/measurements? Function?\n\n  console.log(selectedMetrics);\n\n  var createInput = function createInput() {\n    selectedMetrics.map(function (metric) {\n      data;\n    });\n  };\n\n  var input = {\n    metric: lastMeasurement.metric // measurements needs to be an array of the object below\n    // measurements: {\n    //     metricName: lastMeasurement.metric,\n    //     after: lastMeasurement.at - 1800000,\n    //     before: timeLimit.getTime() - 10000,\n    // } \n\n  }; // const [result] = useQuery({\n  //     query: GET_MULTIPLE_QUERY,\n  //     variables: {\n  //         input,\n  //     },\n  //     pause: !lastMeasurement.metric,\n  // })\n  // const showMultiLines = () => {\n  //     return selectedMetrics.map(metric => {\n  //         return(\n  //             <div>\n  //                 {/* <Line datakey=\"value\">\n  //                 </Line> */}\n  //             </div>\n  //         )\n  //     })\n  // console.log(addMeasurementInputToArray(selectedMetrics))\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  });\n};\n\nexport default ShowMultiple;","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowMultiple.tsx"],"names":["React","useState","useSelector","getSelectedMetrics","state","selectedMetrics","metric","getLastKnownMeasurement","lastMeasurement","ShowMultiple","measurementArray","setMeasurementArray","timeLimit","Date","dataInput","after","at","before","getTime","console","log","createInput","map","data","input"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,WAAT,QAA4B,aAA5B;;AAKA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAEC,KAAF,EAAqB;AAC5C,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAaD,eAArC;AACA,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHD;;AAIA,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACH,KAAD,EAAmB;AAC/C,MAAMI,eAAe,GAAGJ,KAAK,CAACE,MAAN,CAAaE,eAArC;AACA,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHD;;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA,qBAEKP,WAAW,CAACC,kBAAD,CAFhB;AAAA,MAEfE,eAFe,gBAEfA,eAFe;;AAAA,sBAGKH,WAAW,CAACK,uBAAD,CAHhB;AAAA,MAGfC,eAHe,iBAGfA,eAHe;;AAAA,kBAI2BP,QAAQ,CAAC,EAAD,CAJnC;AAAA;AAAA,MAIfS,gBAJe;AAAA,MAIGC,mBAJH;;AAKvB,MAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AACA,MAAMC,SAAS,GAAG;AACdC,IAAAA,KAAK,EAAEP,eAAe,CAACQ,EAAhB,GAAqB,OADd;AAEdC,IAAAA,MAAM,EAAEL,SAAS,CAACM,OAAV,KAAsB;AAFhB,GAAlB,CANuB,CAWvB;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYf,eAAZ;;AAEA,MAAMgB,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtBhB,IAAAA,eAAe,CAACiB,GAAhB,CAAoB,UAAChB,MAAD,EAAoB;AACpCiB,MAAAA,IAAI;AACP,KAFD;AAGH,GAJD;;AAOA,MAAMC,KAAK,GAAG;AACVlB,IAAAA,MAAM,EAAEE,eAAe,CAACF,MADd,CAEV;AACA;AACA;AACA;AACA;AACA;;AAPU,GAAd,CAtBuB,CAgCvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAKH,CA1DD;;AA4DA,eAAeG,YAAf","sourcesContent":["import React, { useState } from 'react'\nimport { IState } from '../../store'\nimport { useSelector } from 'react-redux'\nimport { Line } from 'recharts'\nimport { useQuery } from 'urql'\nimport { GET_MULTIPLE_QUERY } from './Queries'\n\nconst getSelectedMetrics = ( state: IState ) => {\n    const selectedMetrics = state.metric.selectedMetrics\n    return { selectedMetrics }\n}\nconst getLastKnownMeasurement = (state: IState) => {\n    const lastMeasurement = state.metric.lastMeasurement\n    return { lastMeasurement }\n}\n\nconst ShowMultiple = () => {\n\n    const { selectedMetrics } = useSelector(getSelectedMetrics)\n    const { lastMeasurement } = useSelector(getLastKnownMeasurement)\n    const [ measurementArray, setMeasurementArray ] = useState([] as any)\n    const timeLimit = new Date()\n    const dataInput = {\n        after: lastMeasurement.at - 1800000,\n        before: timeLimit.getTime() - 10000,\n    }\n\n    // how to create the array of input/measurements? Function?\n\n    console.log(selectedMetrics)\n\n    const createInput = () => {\n        selectedMetrics.map((metric: string) => {\n            data\n        })\n    }\n\n\n    const input = {\n        metric: lastMeasurement.metric,\n        // measurements needs to be an array of the object below\n        // measurements: {\n        //     metricName: lastMeasurement.metric,\n        //     after: lastMeasurement.at - 1800000,\n        //     before: timeLimit.getTime() - 10000,\n        // } \n    }\n\n    // const [result] = useQuery({\n    //     query: GET_MULTIPLE_QUERY,\n    //     variables: {\n    //         input,\n    //     },\n    //     pause: !lastMeasurement.metric,\n    // })\n    // const showMultiLines = () => {\n    //     return selectedMetrics.map(metric => {\n    //         return(\n    //             <div>\n    //                 {/* <Line datakey=\"value\">\n\n    //                 </Line> */}\n    //             </div>\n    //         )\n    //     })\n    \n\n    // console.log(addMeasurementInputToArray(selectedMetrics))\n\n    return(\n        <div>\n  \n        </div>\n    )\n}\n\nexport default ShowMultiple;"]},"metadata":{},"sourceType":"module"}