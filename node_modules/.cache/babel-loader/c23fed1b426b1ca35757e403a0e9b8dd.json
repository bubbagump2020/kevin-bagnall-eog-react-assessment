{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowMultiple.tsx\";\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useQuery } from 'urql';\nimport { GET_MULTIPLE_QUERY } from './Queries';\n\nvar getSelectedMetrics = function getSelectedMetrics(state) {\n  var selectedMetrics = state.metric.selectedMetrics;\n  return {\n    selectedMetrics: selectedMetrics\n  };\n};\n\nvar getLastKnownMeasurement = function getLastKnownMeasurement(state) {\n  var lastMeasurement = state.metric.lastMeasurement;\n  return {\n    lastMeasurement: lastMeasurement\n  };\n};\n\nvar ShowMultiple = function ShowMultiple() {\n  var _useSelector = useSelector(getSelectedMetrics),\n      selectedMetrics = _useSelector.selectedMetrics;\n\n  var _useSelector2 = useSelector(getLastKnownMeasurement),\n      lastMeasurement = _useSelector2.lastMeasurement;\n\n  var timeLimit = new Date();\n  var input = {\n    metric: lastMeasurement.metric,\n    measurements: {\n      metricName: lastMeasurement.metric,\n      after: lastMeasurement.at - 1800000,\n      before: timeLimit.getTime() - 10000\n    }\n  };\n\n  var _useQuery = useQuery({\n    query: GET_MULTIPLE_QUERY,\n    variables: {\n      input: input\n    },\n    pause: !lastMeasurement.metric\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0]; // const showMultiLines = () => {\n  //     return selectedMetrics.map(metric => {\n  //         return(\n  //             <div>\n  //                 {/* <Line datakey=\"value\">\n  //                 </Line> */}\n  //             </div>\n  //         )\n  //     })\n\n\n  console.log(result.error);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  });\n};\n\nexport default ShowMultiple;","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowMultiple.tsx"],"names":["React","useSelector","useQuery","GET_MULTIPLE_QUERY","getSelectedMetrics","state","selectedMetrics","metric","getLastKnownMeasurement","lastMeasurement","ShowMultiple","timeLimit","Date","input","measurements","metricName","after","at","before","getTime","query","variables","pause","result","console","log","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,QAAT,QAAyB,MAAzB;AACA,SAASC,kBAAT,QAAmC,WAAnC;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAEC,KAAF,EAAqB;AAC5C,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAaD,eAArC;AACA,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHD;;AAIA,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACH,KAAD,EAAmB;AAC/C,MAAMI,eAAe,GAAGJ,KAAK,CAACE,MAAN,CAAaE,eAArC;AACA,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHD;;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA,qBAEKT,WAAW,CAACG,kBAAD,CAFhB;AAAA,MAEfE,eAFe,gBAEfA,eAFe;;AAAA,sBAGKL,WAAW,CAACO,uBAAD,CAHhB;AAAA,MAGfC,eAHe,iBAGfA,eAHe;;AAIvB,MAAME,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AAEA,MAAMC,KAAK,GAAG;AACVN,IAAAA,MAAM,EAAEE,eAAe,CAACF,MADd;AAEVO,IAAAA,YAAY,EAAE;AACVC,MAAAA,UAAU,EAAEN,eAAe,CAACF,MADlB;AAEVS,MAAAA,KAAK,EAAEP,eAAe,CAACQ,EAAhB,GAAqB,OAFlB;AAGVC,MAAAA,MAAM,EAAEP,SAAS,CAACQ,OAAV,KAAsB;AAHpB;AAFJ,GAAd;;AANuB,kBAeNjB,QAAQ,CAAC;AACtBkB,IAAAA,KAAK,EAAEjB,kBADe;AAEtBkB,IAAAA,SAAS,EAAE;AACPR,MAAAA,KAAK,EAALA;AADO,KAFW;AAKtBS,IAAAA,KAAK,EAAE,CAACb,eAAe,CAACF;AALF,GAAD,CAfF;AAAA;AAAA,MAehBgB,MAfgB,kBAsBvB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,KAAnB;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAKH,CAzCD;;AA2CA,eAAehB,YAAf","sourcesContent":["import React, { useState } from 'react'\nimport { IState } from '../../store'\nimport { useSelector } from 'react-redux'\nimport { Line } from 'recharts'\nimport { useQuery } from 'urql'\nimport { GET_MULTIPLE_QUERY } from './Queries'\n\nconst getSelectedMetrics = ( state: IState ) => {\n    const selectedMetrics = state.metric.selectedMetrics\n    return { selectedMetrics }\n}\nconst getLastKnownMeasurement = (state: IState) => {\n    const lastMeasurement = state.metric.lastMeasurement\n    return { lastMeasurement }\n}\n\nconst ShowMultiple = () => {\n\n    const { selectedMetrics } = useSelector(getSelectedMetrics)\n    const { lastMeasurement } = useSelector(getLastKnownMeasurement)\n    const timeLimit = new Date()\n\n    const input = {\n        metric: lastMeasurement.metric,\n        measurements: {\n            metricName: lastMeasurement.metric,\n            after: lastMeasurement.at - 1800000,\n            before: timeLimit.getTime() - 10000,\n        } \n    }\n\n    const [result] = useQuery({\n        query: GET_MULTIPLE_QUERY,\n        variables: {\n            input,\n        },\n        pause: !lastMeasurement.metric,\n    })\n    // const showMultiLines = () => {\n    //     return selectedMetrics.map(metric => {\n    //         return(\n    //             <div>\n    //                 {/* <Line datakey=\"value\">\n\n    //                 </Line> */}\n    //             </div>\n    //         )\n    //     })\n    \n\n    console.log(result.error)\n\n    return(\n        <div>\n  \n        </div>\n    )\n}\n\nexport default ShowMultiple;"]},"metadata":{},"sourceType":"module"}