{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ToolTipContent.tsx\";\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nvar getContent = function getContent(state) {\n  var lastMeasurement = state.metric.lastMeasurement;\n  return lastMeasurement;\n};\n\nvar handleTimeConversion = function handleTimeConversion() {};\n\nvar ToolTipContent = function ToolTipContent() {\n  var measurement = useSelector(getContent);\n\n  var showToolTipData = function showToolTipData() {\n    console.log(measurement.metric);\n    console.log(measurement.value);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  });\n};\n\nexport default ToolTipContent;","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ToolTipContent.tsx"],"names":["React","useSelector","getContent","state","lastMeasurement","metric","handleTimeConversion","ToolTipContent","measurement","showToolTipData","console","log","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAmB;AAClC,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAaD,eAArC;AACA,SAAOA,eAAP;AACH,CAHD;;AAKA,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM,CAElC,CAFD;;AAIC,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC1B,MAAMC,WAAW,GAAGP,WAAW,CAACC,UAAD,CAA/B;;AAEA,MAAMO,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAYH,WAAW,CAACH,MAAxB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,WAAW,CAACI,KAAxB;AACH,GAHD;;AAIA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAMH,CAbA;;AAeD,eAAeL,cAAf","sourcesContent":["import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { IState } from '../../store'\n\n\nconst getContent = (state: IState) => {\n    const lastMeasurement = state.metric.lastMeasurement\n    return lastMeasurement\n}\n\nconst handleTimeConversion = () => {\n\n}\n\n const ToolTipContent = () => {\n    const measurement = useSelector(getContent)\n\n    const showToolTipData = () => {\n        console.log(measurement.metric)\n        console.log(measurement.value)\n    }\n    return(\n        <div>\n            {/* {`${measurement.metric}` } <br></br>\n            {`${measurement.value} ${measurement.unit}` } */}\n        </div>\n    )\n}\n\nexport default ToolTipContent;"]},"metadata":{},"sourceType":"module"}