{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowData.tsx\";\nimport React, { useEffect } from 'react';\nimport { actions } from './reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createClient, useQuery, Provider } from 'urql';\nimport Graph from './Graph';\nvar client = createClient({\n  url: 'https://react.eogresources.com/graphql'\n});\nvar LAST_KNOWN_MEASUREMENT_QUERY = \"\\n   query($metricName: String!){\\n       getLastKnownMeasurement(metricName: $metricName){\\n           metric\\n           at\\n           value\\n           unit\\n       }\\n   } \\n\";\nvar MEASUREMENTS_QUERY = \"\\n   query($[Measurement]: MeasurementQuery){\\n       getMeasurements([Measurement]: $[Measurement]){\\n           metric\\n           at\\n           value\\n           unit\\n       }\\n   }\\n\";\nvar GET_MULTIPLE_MEASUREMENTS_QUERY = \"\\n   query($input: [MeasurementQuery]){\\n       getMultipleMeasurements(input: $input){\\n           metric\\n           measurements\\n       }\\n   }\\n\";\n\nvar getMetric = function getMetric(state) {\n  var name = state.metric.name;\n  return {\n    name: name\n  };\n}; // const getLastKnownMeasurement = (state: IState) => {\n//     const lastMeasurement = state.metric.lastMeasurement\n//     return { lastMeasurement }\n// }\n\n\nvar ShowData = function ShowData() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(getMetric),\n      name = _useSelector.name; // const { lastMeasurement } = useSelector(getLastKnownMeasurement)\n\n\n  var input = {// before: Date.now(),\n    // after: lastMeasurement.at\n  };\n  var metricName = name;\n\n  var _useQuery = useQuery({\n    query: LAST_KNOWN_MEASUREMENT_QUERY,\n    variables: {\n      metricName: metricName\n    },\n    pause: !metricName,\n    // pollInterval: 5000,\n    requestPolicy: 'cache-and-network'\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0]; // const [historicalResult] = useQuery({\n  //     query: MEASUREMENTS_QUERY,\n  //     variables: {\n  //         input,\n  //     },\n  //     pause: !LAST_KNOWN_MEASUREMENT_QUERY,\n  //     pollInterval: 5000,\n  //     requestPolicy: 'cache-and-network',\n  // })\n\n\n  var fetching = result.fetching,\n      data = result.data,\n      error = result.error;\n  useEffect(function () {\n    if (error) {\n      console.log(error);\n    }\n\n    if (!data) return;\n    var getLastKnownMeasurement = data.getLastKnownMeasurement;\n    console.log(typeof getLastKnownMeasurement, getLastKnownMeasurement);\n    dispatch(actions.lastMeasurement(getLastKnownMeasurement));\n  }, [dispatch, data, error]); // console.log(historicalResult)\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Graph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }));\n};\n\nexport default (function () {\n  return React.createElement(Provider, {\n    value: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(ShowData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowData.tsx"],"names":["React","useEffect","actions","useDispatch","useSelector","createClient","useQuery","Provider","Graph","client","url","LAST_KNOWN_MEASUREMENT_QUERY","MEASUREMENTS_QUERY","GET_MULTIPLE_MEASUREMENTS_QUERY","getMetric","state","name","metric","ShowData","dispatch","input","metricName","query","variables","pause","requestPolicy","result","fetching","data","error","console","log","getLastKnownMeasurement","lastMeasurement"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,QAAjC,QAAiD,MAAjD;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,IAAMC,MAAM,GAAGJ,YAAY,CAAC;AACxBK,EAAAA,GAAG,EAAE;AADmB,CAAD,CAA3B;AAIA,IAAMC,4BAA4B,wLAAlC;AAUA,IAAMC,kBAAkB,iMAAxB;AAWA,IAAMC,+BAA+B,0JAArC;;AASA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAmB;AAAA,MACzBC,IADyB,GAChBD,KAAK,CAACE,MADU,CACzBD,IADyB;AAEjC,SAAO;AAAEA,IAAAA,IAAI,EAAJA;AAAF,GAAP;AACH,CAHD,C,CAKA;AACA;AACA;AACA;;;AAEA,IAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAEnB,MAAMC,QAAQ,GAAGhB,WAAW,EAA5B;;AAFmB,qBAGFC,WAAW,CAACU,SAAD,CAHT;AAAA,MAGXE,IAHW,gBAGXA,IAHW,EAInB;;;AACA,MAAMI,KAAK,GAAG,CACV;AACA;AAFU,GAAd;AAIA,MAAMC,UAAU,GAAGL,IAAnB;;AATmB,kBAWFV,QAAQ,CAAC;AACtBgB,IAAAA,KAAK,EAAEX,4BADe;AAEtBY,IAAAA,SAAS,EAAE;AACPF,MAAAA,UAAU,EAAVA;AADO,KAFW;AAKtBG,IAAAA,KAAK,EAAE,CAACH,UALc;AAMtB;AACAI,IAAAA,aAAa,EAAE;AAPO,GAAD,CAXN;AAAA;AAAA,MAWZC,MAXY,kBAqBnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA7BmB,MA+BXC,QA/BW,GA+BcD,MA/Bd,CA+BXC,QA/BW;AAAA,MA+BDC,IA/BC,GA+BcF,MA/Bd,CA+BDE,IA/BC;AAAA,MA+BKC,KA/BL,GA+BcH,MA/Bd,CA+BKG,KA/BL;AAgCnB5B,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAG4B,KAAH,EAAS;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AACD,QAAI,CAACD,IAAL,EAAW;AAJC,QAKJI,uBALI,GAKwBJ,IALxB,CAKJI,uBALI;AAMZF,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAOC,uBAAnB,EAA4CA,uBAA5C;AACAb,IAAAA,QAAQ,CAACjB,OAAO,CAAC+B,eAAR,CAAwBD,uBAAxB,CAAD,CAAR;AACH,GARQ,EAQN,CAACb,QAAD,EAAWS,IAAX,EAAiBC,KAAjB,CARM,CAAT,CAhCmB,CA0CnB;;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAjDD;;AAoDA,gBAAe,YAAM;AACjB,SACI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEpB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAND","sourcesContent":["import React, { useEffect } from 'react'\nimport { IState } from '../../store'\nimport { actions } from './reducer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { createClient, useQuery, Provider } from 'urql'\nimport { Chip, LinearProgress } from '@material-ui/core'\nimport Graph from './Graph'\n\nconst client = createClient({\n    url: 'https://react.eogresources.com/graphql'\n})\n\nconst LAST_KNOWN_MEASUREMENT_QUERY = `\n   query($metricName: String!){\n       getLastKnownMeasurement(metricName: $metricName){\n           metric\n           at\n           value\n           unit\n       }\n   } \n`\nconst MEASUREMENTS_QUERY = `\n   query($[Measurement]: MeasurementQuery){\n       getMeasurements([Measurement]: $[Measurement]){\n           metric\n           at\n           value\n           unit\n       }\n   }\n`\n\nconst GET_MULTIPLE_MEASUREMENTS_QUERY = `\n   query($input: [MeasurementQuery]){\n       getMultipleMeasurements(input: $input){\n           metric\n           measurements\n       }\n   }\n`\n\nconst getMetric = (state: IState) => {\n    const { name } = state.metric\n    return { name }\n}\n\n// const getLastKnownMeasurement = (state: IState) => {\n//     const lastMeasurement = state.metric.lastMeasurement\n//     return { lastMeasurement }\n// }\n\nconst ShowData = () => {\n\n    const dispatch = useDispatch()\n    const { name } = useSelector(getMetric)\n    // const { lastMeasurement } = useSelector(getLastKnownMeasurement)\n    const input = {\n        // before: Date.now(),\n        // after: lastMeasurement.at\n    }\n    const metricName = name\n\n    const [result] = useQuery({\n        query: LAST_KNOWN_MEASUREMENT_QUERY,\n        variables: {\n            metricName,\n        },\n        pause: !metricName,\n        // pollInterval: 5000,\n        requestPolicy: 'cache-and-network',\n    })\n\n    // const [historicalResult] = useQuery({\n    //     query: MEASUREMENTS_QUERY,\n    //     variables: {\n    //         input,\n    //     },\n    //     pause: !LAST_KNOWN_MEASUREMENT_QUERY,\n    //     pollInterval: 5000,\n    //     requestPolicy: 'cache-and-network',\n    // })\n\n    const { fetching, data, error} = result\n    useEffect(() => {\n        if(error){\n            console.log(error)\n        }\n        if (!data) return\n        const { getLastKnownMeasurement } = data\n        console.log(typeof getLastKnownMeasurement, getLastKnownMeasurement )\n        dispatch(actions.lastMeasurement(getLastKnownMeasurement))\n    }, [dispatch, data, error])\n\n    // console.log(historicalResult)\n\n    return(\n        <div>\n            <Graph />\n        </div>\n    )\n}\n\n\nexport default () => {\n    return(\n        <Provider value={client}>\n            <ShowData />\n        </Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}