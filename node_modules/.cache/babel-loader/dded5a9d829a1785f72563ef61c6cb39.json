{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowData.tsx\";\nimport React, { useEffect } from 'react';\nimport { actions } from './reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createClient, Provider, useSubscription } from 'urql';\nimport Graph from './Graph';\nvar client = createClient({\n  url: 'https://react.eogresources.com/graphql'\n});\nvar LAST_KNOWN_MEASUREMENT_QUERY = \"\\n   query($metricName: String!){\\n       getLastKnownMeasurement(metricName: $metricName){\\n           metric\\n           at\\n           value\\n           unit\\n       }\\n   } \\n\";\n\nvar getMetric = function getMetric(state) {\n  var name = state.metric.name;\n  return {\n    name: name\n  };\n};\n\nvar ShowData = function ShowData() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(getMetric),\n      name = _useSelector.name;\n\n  var metricName = name;\n\n  var _useSubscription = useSubscription({\n    query: LAST_KNOWN_MEASUREMENT_QUERY,\n    variables: {\n      metricName: metricName\n    },\n    pause: !metricName // pollInterval: 5000,\n    // requestPolicy: 'cache-and-network',\n\n  }),\n      _useSubscription2 = _slicedToArray(_useSubscription, 1),\n      result = _useSubscription2[0];\n\n  var data = result.data,\n      error = result.error;\n  useEffect(function () {\n    if (error) {\n      console.log(error);\n    }\n\n    if (!data) return;\n    var getLastKnownMeasurement = data.getLastKnownMeasurement;\n    dispatch(actions.lastMeasurement(getLastKnownMeasurement));\n  }, [dispatch, data, error]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Graph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }));\n};\n\nexport default (function () {\n  return React.createElement(Provider, {\n    value: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(ShowData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowData.tsx"],"names":["React","useEffect","actions","useDispatch","useSelector","createClient","Provider","useSubscription","Graph","client","url","LAST_KNOWN_MEASUREMENT_QUERY","getMetric","state","name","metric","ShowData","dispatch","metricName","query","variables","pause","result","data","error","console","log","getLastKnownMeasurement","lastMeasurement"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,EAAiCC,QAAjC,EAA2CC,eAA3C,QAAkE,MAAlE;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,IAAMC,MAAM,GAAGJ,YAAY,CAAC;AACxBK,EAAAA,GAAG,EAAE;AADmB,CAAD,CAA3B;AAIA,IAAMC,4BAA4B,wLAAlC;;AAWA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAmB;AAAA,MACzBC,IADyB,GAChBD,KAAK,CAACE,MADU,CACzBD,IADyB;AAEjC,SAAO;AAAEA,IAAAA,IAAI,EAAJA;AAAF,GAAP;AACH,CAHD;;AAKA,IAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAEnB,MAAMC,QAAQ,GAAGd,WAAW,EAA5B;;AAFmB,qBAGFC,WAAW,CAACQ,SAAD,CAHT;AAAA,MAGXE,IAHW,gBAGXA,IAHW;;AAInB,MAAMI,UAAU,GAAGJ,IAAnB;;AAJmB,yBAMFP,eAAe,CAAC;AAC7BY,IAAAA,KAAK,EAAER,4BADsB;AAE7BS,IAAAA,SAAS,EAAE;AACPF,MAAAA,UAAU,EAAVA;AADO,KAFkB;AAK7BG,IAAAA,KAAK,EAAE,CAACH,UALqB,CAM7B;AACA;;AAP6B,GAAD,CANb;AAAA;AAAA,MAMZI,MANY;;AAAA,MAgBXC,IAhBW,GAgBID,MAhBJ,CAgBXC,IAhBW;AAAA,MAgBLC,KAhBK,GAgBIF,MAhBJ,CAgBLE,KAhBK;AAiBnBvB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGuB,KAAH,EAAS;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AACD,QAAI,CAACD,IAAL,EAAW;AAJC,QAKJI,uBALI,GAKwBJ,IALxB,CAKJI,uBALI;AAMZV,IAAAA,QAAQ,CAACf,OAAO,CAAC0B,eAAR,CAAwBD,uBAAxB,CAAD,CAAR;AACH,GAPQ,EAON,CAACV,QAAD,EAAWM,IAAX,EAAiBC,KAAjB,CAPM,CAAT;AAWA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAjCD;;AAoCA,gBAAe,YAAM;AACjB,SACI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEf,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAND","sourcesContent":["import React, { useEffect } from 'react'\nimport { IState } from '../../store'\nimport { actions } from './reducer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { createClient, useQuery, Provider, useSubscription } from 'urql'\nimport Graph from './Graph'\n\nconst client = createClient({\n    url: 'https://react.eogresources.com/graphql'\n})\n\nconst LAST_KNOWN_MEASUREMENT_QUERY = `\n   query($metricName: String!){\n       getLastKnownMeasurement(metricName: $metricName){\n           metric\n           at\n           value\n           unit\n       }\n   } \n`\n\nconst getMetric = (state: IState) => {\n    const { name } = state.metric\n    return { name }\n}\n\nconst ShowData = () => {\n\n    const dispatch = useDispatch()\n    const { name } = useSelector(getMetric)\n    const metricName = name\n\n    const [result] = useSubscription({\n        query: LAST_KNOWN_MEASUREMENT_QUERY,\n        variables: {\n            metricName,\n        },\n        pause: !metricName,\n        // pollInterval: 5000,\n        // requestPolicy: 'cache-and-network',\n    })\n\n    const { data, error} = result\n    useEffect(() => {\n        if(error){\n            console.log(error)\n        }\n        if (!data) return\n        const { getLastKnownMeasurement } = data\n        dispatch(actions.lastMeasurement(getLastKnownMeasurement))\n    }, [dispatch, data, error])\n\n \n\n    return(\n        <div>\n            <Graph />\n        </div>\n    )\n}\n\n\nexport default () => {\n    return(\n        <Provider value={client}>\n            <ShowData />\n        </Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}