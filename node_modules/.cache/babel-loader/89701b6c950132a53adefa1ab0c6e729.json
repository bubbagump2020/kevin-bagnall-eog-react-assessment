{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowChartData.tsx\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery } from 'urql';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\nvar MEASUREMENTS_QUERY = \"\\n   query($input: MeasurementQuery){\\n       getMeasurements(input: $input){\\n           metric\\n           at\\n           value\\n           unit\\n       }\\n   }\\n\";\n\nvar getLastKnownMeasurement = function getLastKnownMeasurement(state) {\n  var lastMeasurement = state.metric.lastMeasurement;\n  return {\n    lastMeasurement: lastMeasurement\n  };\n};\n\nvar ShowChartData = function ShowChartData() {\n  var _useSelector = useSelector(getLastKnownMeasurement),\n      lastMeasurement = _useSelector.lastMeasurement;\n\n  var timeLimit = new Date().getTime();\n  var input = {\n    metricName: lastMeasurement.metric,\n    after: lastMeasurement.at,\n    before: timeLimit - 45\n  };\n\n  var _useQuery = useQuery({\n    query: MEASUREMENTS_QUERY,\n    variables: {\n      input: input\n    },\n    pause: !lastMeasurement.metric // pollInterval: 5000,\n    // requestPolicy: 'cache-and-network',\n\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var dispatch = useDispatch();\n  var fetching = result.fetching,\n      data = result.data,\n      error = result.error;\n  useEffect(function () {\n    if (error) {\n      console.log(error);\n    }\n\n    if (!data) return;\n    var measurements = data.measurements;\n    console.log(result.data);\n    console.log(measurements);\n  }, [dispatch, data, error]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(LineChart, {\n    width: 600,\n    height: 300,\n    data: result.data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"value\",\n    stroke: \"#8884d8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    dataKey: \"value\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(YAxis, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })));\n};\n\nexport default (function () {\n  return React.createElement(ShowChartData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  });\n});","map":{"version":3,"sources":["/home/kevin/Desktop/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowChartData.tsx"],"names":["React","useEffect","useSelector","useDispatch","useQuery","LineChart","Line","CartesianGrid","XAxis","YAxis","MEASUREMENTS_QUERY","getLastKnownMeasurement","state","lastMeasurement","metric","ShowChartData","timeLimit","Date","getTime","input","metricName","after","at","before","query","variables","pause","result","dispatch","fetching","data","error","console","log","measurements"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,MAAzB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,aAA1B,EAAyCC,KAAzC,EAAgDC,KAAhD,QAA6D,UAA7D;AAEA,IAAMC,kBAAkB,yKAAxB;;AAWA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,KAAD,EAAmB;AAC3C,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAaD,eAArC;AACA,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHL;;AAKA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,qBAEIb,WAAW,CAACS,uBAAD,CAFf;AAAA,MAEhBE,eAFgB,gBAEhBA,eAFgB;;AAGxB,MAAMG,SAAS,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACA,MAAMC,KAAK,GAAG;AACVC,IAAAA,UAAU,EAAEP,eAAe,CAACC,MADlB;AAEVO,IAAAA,KAAK,EAAER,eAAe,CAACS,EAFb;AAGVC,IAAAA,MAAM,EAAEP,SAAS,GAAG;AAHV,GAAd;;AAJwB,kBAUPZ,QAAQ,CAAC;AACtBoB,IAAAA,KAAK,EAAEd,kBADe;AAEtBe,IAAAA,SAAS,EAAE;AACPN,MAAAA,KAAK,EAALA;AADO,KAFW;AAKtBO,IAAAA,KAAK,EAAE,CAACb,eAAe,CAACC,MALF,CAMtB;AACA;;AAPsB,GAAD,CAVD;AAAA;AAAA,MAUjBa,MAViB;;AAoBxB,MAAMC,QAAQ,GAAGzB,WAAW,EAA5B;AApBwB,MAsBhB0B,QAtBgB,GAsBUF,MAtBV,CAsBhBE,QAtBgB;AAAA,MAsBNC,IAtBM,GAsBUH,MAtBV,CAsBNG,IAtBM;AAAA,MAsBAC,KAtBA,GAsBUJ,MAtBV,CAsBAI,KAtBA;AAuBxB9B,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAG8B,KAAH,EAAS;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AACD,QAAI,CAACD,IAAL,EAAW;AAJC,QAKLI,YALK,GAKWJ,IALX,CAKLI,YALK;AAMZF,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACG,IAAnB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AACH,GARQ,EAQN,CAACN,QAAD,EAAWE,IAAX,EAAiBC,KAAjB,CARM,CAAT;AAWA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE,GAAlB;AAAuB,IAAA,MAAM,EAAE,GAA/B;AAAoC,IAAA,IAAI,EAAEJ,MAAM,CAACG,IAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAC,OAA9B;AAAsC,IAAA,MAAM,EAAC,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,aAAD;AAAe,IAAA,MAAM,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ,CADJ;AAUH,CA5CD;;AA8CA,gBAAe,YAAM;AACjB,SACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAJD","sourcesContent":["import React, { useEffect } from 'react'\nimport { IState } from '../../store'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useQuery } from 'urql'\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts'\n\nconst MEASUREMENTS_QUERY = `\n   query($input: MeasurementQuery){\n       getMeasurements(input: $input){\n           metric\n           at\n           value\n           unit\n       }\n   }\n`\n\nconst getLastKnownMeasurement = (state: IState) => {\n        const lastMeasurement = state.metric.lastMeasurement\n        return { lastMeasurement }\n    }\n\nconst ShowChartData = () => {\n\n    const { lastMeasurement } = useSelector(getLastKnownMeasurement)\n    const timeLimit = new Date().getTime()\n    const input = {\n        metricName: lastMeasurement.metric,\n        after: lastMeasurement.at,\n        before: timeLimit - 45,\n    }\n\n    const [result] = useQuery({\n        query: MEASUREMENTS_QUERY,\n        variables: {\n            input,\n        },\n        pause: !lastMeasurement.metric,\n        // pollInterval: 5000,\n        // requestPolicy: 'cache-and-network',\n    })\n\n    const dispatch = useDispatch()\n\n    const { fetching, data, error } = result\n    useEffect(() => {\n        if(error){\n            console.log(error)\n        }\n        if (!data) return\n        const {measurements} = data\n        console.log(result.data)\n        console.log(measurements)\n    }, [dispatch, data, error])\n\n\n    return(\n        <div>\n            <LineChart width={600} height={300} data={result.data}>\n                <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\"/>\n                <CartesianGrid stroke=\"#ccc\"/>\n                <XAxis dataKey=\"value\"/>\n                <YAxis />\n            </LineChart>\n        </div>\n    )\n}\n\nexport default () => {\n    return(\n        <ShowChartData />\n    )\n}"]},"metadata":{},"sourceType":"module"}