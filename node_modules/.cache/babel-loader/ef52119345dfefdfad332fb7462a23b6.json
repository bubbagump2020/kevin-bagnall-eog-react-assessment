{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/MetricSelection.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { FormControl, MenuItem, Select } from '@material-ui/core';\nimport { actions } from './reducer';\nimport { createClient, Provider, useQuery } from 'urql';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Chip from '../../components/Chip';\nimport ShowData from './ShowData';\nvar client = createClient({\n  url: 'https://react.eogresources.com/graphql'\n});\nvar METRICS_QUERY = \"\\n    query{\\n        getMetrics\\n    }\\n\";\n\nvar getOptions = function getOptions(state) {\n  var metrics = state.metric.metrics;\n  return {\n    metrics: metrics\n  };\n};\n\nvar getMetric = function getMetric(stat) {};\n\nvar MetricSelection = function MetricSelection() {\n  var _useQuery = useQuery({\n    query: METRICS_QUERY\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0];\n\n  var dispatch = useDispatch();\n  var data = result.data,\n      fetching = result.fetching,\n      error = result.error;\n\n  var _useSelector = useSelector(getOptions),\n      metrics = _useSelector.metrics;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isChecked = _useState2[0],\n      setIsChecked = _useState2[1];\n\n  useEffect(function () {\n    if (error) {\n      dispatch(actions.metricApiErrorReceived({\n        error: error.message\n      }));\n    }\n\n    if (!data) return;\n    dispatch(actions.metricTypesReceived({\n      metricArray: data.getMetrics\n    }));\n  }, [dispatch, data, error]);\n\n  var showMetricOptions = function showMetricOptions() {\n    if (!data || metrics.length === 0) {} else {\n      return metrics.map(function (metric) {\n        return React.createElement(MenuItem, {\n          key: metric,\n          value: metric,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, metric);\n      });\n    }\n  };\n\n  var handleChange = function handleChange(event) {\n    if (isChecked === false) {\n      setIsChecked(true);\n      dispatch(actions.selectedMetric({\n        name: event.target.value\n      }));\n    }\n\n    if (isChecked === true) {\n      setIsChecked(false);\n      dispatch(actions.selectedMetric({\n        name: \"\"\n      }));\n      dispatch(actions.lastMeasurement({\n        metric: \"\",\n        at: 0,\n        value: 0,\n        unit: \"\"\n      }));\n    }\n  };\n\n  if (fetching) return React.createElement(Chip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Select, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, showMetricOptions())), React.createElement(ShowData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }));\n};\n\nexport default (function () {\n  return React.createElement(Provider, {\n    value: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(MetricSelection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/MetricSelection.tsx"],"names":["React","useEffect","useState","FormControl","MenuItem","Select","actions","createClient","Provider","useQuery","useDispatch","useSelector","Chip","ShowData","client","url","METRICS_QUERY","getOptions","state","metrics","metric","getMetric","stat","MetricSelection","query","result","dispatch","data","fetching","error","isChecked","setIsChecked","metricApiErrorReceived","message","metricTypesReceived","metricArray","getMetrics","showMetricOptions","length","map","handleChange","event","selectedMetric","name","target","value","lastMeasurement","at","unit"],"mappings":"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","sourcesContent":["import React, {useEffect, useState } from 'react'\nimport { FormControl, Checkbox, FormControlLabel, MenuItem, Select} from '@material-ui/core'\nimport { actions } from './reducer'\nimport { createClient, Provider, useQuery } from 'urql'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { IState } from '../../store'\nimport Chip from '../../components/Chip'\nimport ShowData from './ShowData'\n\nconst client = createClient({\n    url: 'https://react.eogresources.com/graphql'\n})\n\nconst METRICS_QUERY = `\n    query{\n        getMetrics\n    }\n`\n\nconst getOptions = (state: IState) => {\n    const { metrics } = state.metric\n    return { metrics }\n}\n\nconst getMetric = (stat: IState) => {\n\n}\n\nconst MetricSelection = () => {\n\n    const [result] = useQuery({\n        query: METRICS_QUERY\n    })\n\n    const dispatch = useDispatch()\n    const {data, fetching, error} = result\n    const {metrics} = useSelector(getOptions)\n    const [isChecked, setIsChecked] = useState(false)\n\n\n    useEffect(() => {\n        if (error){\n            dispatch(actions.metricApiErrorReceived({ error: error.message}))\n        }\n        if(!data) return\n        dispatch(actions.metricTypesReceived({ metricArray: data.getMetrics}))\n    }, [dispatch, data, error])\n\n    const showMetricOptions = () => {\n        if(!data || metrics.length === 0){\n        } else {\n            return metrics.map((metric: string) => {\n                return(\n                    <MenuItem key={metric} value={metric}>{metric}</MenuItem>\n                )\n            })\n        }\n        \n    }\n\n    const handleChange = (event: any) => {\n        if ( isChecked === false ){\n            setIsChecked(true)\n            dispatch(actions.selectedMetric({ name: event.target.value }))\n        }\n        if ( isChecked === true ){\n            setIsChecked(false)\n            dispatch(actions.selectedMetric({ name: \"\" }))\n            dispatch(actions.lastMeasurement({ metric: \"\", at: 0, value: 0, unit: \"\"}))\n        }\n    }\n\n\n    if (fetching) return <Chip />\n\n    return (\n        <div>\n            <FormControl >\n                <Select>\n                    {showMetricOptions()}\n                </Select>\n            </FormControl>\n            <ShowData />\n        </div>\n    )\n   \n}\n\nexport default () => {\n    return(\n        <Provider value={client}>\n         <MetricSelection />\n        </Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}