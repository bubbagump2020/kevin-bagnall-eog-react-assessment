{"ast":null,"code":"import _slicedToArray from \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowMultiple.tsx\";\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useQuery } from 'urql';\nimport { GET_MULTIPLE_QUERY } from './Queries';\n\nvar getSelectedMetrics = function getSelectedMetrics(state) {\n  var selectedMetrics = state.metric.selectedMetrics;\n  return {\n    selectedMetrics: selectedMetrics\n  };\n};\n\nvar getLastKnownMeasurement = function getLastKnownMeasurement(state) {\n  var lastMeasurement = state.metric.lastMeasurement;\n  return {\n    lastMeasurement: lastMeasurement\n  };\n};\n\nvar ShowMultiple = function ShowMultiple() {\n  var _useSelector = useSelector(getSelectedMetrics),\n      selectedMetrics = _useSelector.selectedMetrics;\n\n  var _useSelector2 = useSelector(getLastKnownMeasurement),\n      lastMeasurement = _useSelector2.lastMeasurement; // const [ measurementArray, setMeasurementArray ] = useState([] as any)\n  // const timeLimit = new Date()\n  // const dataInput = {\n  //     metricName: '',\n  //     after: Date.now() - 1800000,\n  //     before: timeLimit.getTime() - 10000,\n  // }\n  // const dataArray = [] as any\n  // how to create the array of input/measurements? Function?\n  // const createInput = () => {\n  //     selectedMetrics.map((metric: string) => {\n  //         dataInput.metricName = metric\n  //         dataArray.push(dataInput)\n  //         console.log(dataArray)\n  //     })\n  // }\n\n\n  var testArray = [{\n    metricName: \"waterTemp\"\n  }, {\n    metricName: \"oilTemp\"\n  }]; // measurements needs to be an array of the object below\n  // measurements: {\n  //     metricName: lastMeasurement.metric,\n  //     after: lastMeasurement.at - 1800000,\n  //     before: timeLimit.getTime() - 10000,\n\n  var _useQuery = useQuery({\n    query: GET_MULTIPLE_QUERY,\n    variables: {\n      testArray: testArray\n    } // pause: !lastMeasurement.metric,\n\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 1),\n      result = _useQuery2[0]; // const showMultiLines = () => {\n  //     return selectedMetrics.map(metric => {\n  //         return(\n  //             <div>\n  //                 {/* <Line datakey=\"value\">\n  //                 </Line> */}\n  //             </div>\n  //         )\n  //     })\n  // console.log(void createInput())\n\n\n  console.log(result);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  });\n};\n\nexport default ShowMultiple;\n/*\n    breakdown of graphql schema of getMeasurements\n    \n    getMeasurements(input:MeasurementQuery):[Measurement]\n\n    type Measurement{\n        metric: String!\n        at: Timestamp!\n        value: Float!\n        unit: String!\n    }\n\n    arguments\n\n    input: MeasurementQuery\n\n    type MeasurementQuery{\n        metricName: String!\n        after: Timestamp\n        before: Timestamp\n    }\n\n    =====\n    notes\n    =====\n\n    [Measurement] is what is being returned from the query\n\n    =========\n    end notes\n    =========\n\n    ======================\n    properly written query\n    ======================\n\n    const input = {\n        metricName: lastMeasurement.metric,\n        after: lastMeasurement.at - 1800000,\n        before: timeLimit.getTime() - 10000,\n    }\n\n    const [result] = useQuery({\n        query: MEASUREMENTS_QUERY,\n        variables: {\n            input,\n        },\n        pause: !lastMeasurement.metric,\n    })\n\n*/\n\n/*\n\n    breakdown of graphql schema of getMultipleMeasurement\n\n    getMultipleMeasurements(input:[MeasurementQuery]):[MultipleMeasurements]\n\n    type MultipleMeasurements {\n        metric: String!\n        measurements: [Measurement]\n    }\n\n    Arguments\n\n    input: [MeasurementQuery]\n\n    =====\n    notes\n    =====\n\n    measurements is an array of Measurements as defined in getMeasurements\n    the input is not just a MeasurementQuery but an array of MeasurementQuery\n    [MultipleMeasurements] is the return data\n\n    =========\n    end notes\n    =========\n\n    =======================\n    Properly written query?\n    =======================\n\n    \n    const MeasurementQuery = {\n        metricName\n        after\n        before\n    }\n\n    const input = [MeasurementQuery, MeasurementQuery]\n\n    const [result] = useQuery({\n        query: GET_MULTIPLE,\n        variables: {\n            input\n        }\n    })\n\n\n\n*/","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowMultiple.tsx"],"names":["React","useSelector","useQuery","GET_MULTIPLE_QUERY","getSelectedMetrics","state","selectedMetrics","metric","getLastKnownMeasurement","lastMeasurement","ShowMultiple","testArray","metricName","query","variables","result","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,QAAT,QAAyB,MAAzB;AACA,SAASC,kBAAT,QAAmC,WAAnC;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAEC,KAAF,EAAqB;AAC5C,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAaD,eAArC;AACA,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHD;;AAIA,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACH,KAAD,EAAmB;AAC/C,MAAMI,eAAe,GAAGJ,KAAK,CAACE,MAAN,CAAaE,eAArC;AACA,SAAO;AAAEA,IAAAA,eAAe,EAAfA;AAAF,GAAP;AACH,CAHD;;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA,qBAEKT,WAAW,CAACG,kBAAD,CAFhB;AAAA,MAEfE,eAFe,gBAEfA,eAFe;;AAAA,sBAGKL,WAAW,CAACO,uBAAD,CAHhB;AAAA,MAGfC,eAHe,iBAGfA,eAHe,EAIvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAME,SAAS,GAAG,CACd;AACIC,IAAAA,UAAU,EAAE;AADhB,GADc,EAId;AACIA,IAAAA,UAAU,EAAE;AADhB,GAJc,CAAlB,CAvBuB,CAkCvB;AACA;AACA;AACA;AACA;;AAtCuB,kBAwCNV,QAAQ,CAAC;AACtBW,IAAAA,KAAK,EAAEV,kBADe;AAEtBW,IAAAA,SAAS,EAAE;AACPH,MAAAA,SAAS,EAATA;AADO,KAFW,CAKtB;;AALsB,GAAD,CAxCF;AAAA;AAAA,MAwChBI,MAxCgB,kBAgDvB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAKH,CAlED;;AAoEA,eAAeL,YAAf;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA","sourcesContent":["import React, { useState } from 'react'\nimport { IState } from '../../store'\nimport { useSelector } from 'react-redux'\nimport { Line } from 'recharts'\nimport { useQuery } from 'urql'\nimport { GET_MULTIPLE_QUERY } from './Queries'\n\nconst getSelectedMetrics = ( state: IState ) => {\n    const selectedMetrics = state.metric.selectedMetrics\n    return { selectedMetrics }\n}\nconst getLastKnownMeasurement = (state: IState) => {\n    const lastMeasurement = state.metric.lastMeasurement\n    return { lastMeasurement }\n}\n\nconst ShowMultiple = () => {\n\n    const { selectedMetrics } = useSelector(getSelectedMetrics)\n    const { lastMeasurement } = useSelector(getLastKnownMeasurement)\n    // const [ measurementArray, setMeasurementArray ] = useState([] as any)\n    // const timeLimit = new Date()\n    // const dataInput = {\n    //     metricName: '',\n    //     after: Date.now() - 1800000,\n    //     before: timeLimit.getTime() - 10000,\n    // }\n    // const dataArray = [] as any\n\n    // how to create the array of input/measurements? Function?\n\n    // const createInput = () => {\n    //     selectedMetrics.map((metric: string) => {\n    //         dataInput.metricName = metric\n    //         dataArray.push(dataInput)\n    //         console.log(dataArray)\n    //     })\n    // }\n\n    const testArray = [\n        {\n            metricName: \"waterTemp\"\n        },\n        { \n            metricName: \"oilTemp\"\n        }\n    ]\n\n\n\n    // measurements needs to be an array of the object below\n    // measurements: {\n    //     metricName: lastMeasurement.metric,\n    //     after: lastMeasurement.at - 1800000,\n    //     before: timeLimit.getTime() - 10000,\n\n    const [result] = useQuery({\n        query: GET_MULTIPLE_QUERY,\n        variables: {\n            testArray,\n        },\n        // pause: !lastMeasurement.metric,\n    })\n\n    // const showMultiLines = () => {\n    //     return selectedMetrics.map(metric => {\n    //         return(\n    //             <div>\n    //                 {/* <Line datakey=\"value\">\n\n    //                 </Line> */}\n    //             </div>\n    //         )\n    //     })\n\n    // console.log(void createInput())\n    console.log(result)\n    return(\n        <div>\n            {/* {void createInput()}  */}\n        </div>\n    )\n}\n\nexport default ShowMultiple;\n\n/*\n    breakdown of graphql schema of getMeasurements\n    \n    getMeasurements(input:MeasurementQuery):[Measurement]\n\n    type Measurement{\n        metric: String!\n        at: Timestamp!\n        value: Float!\n        unit: String!\n    }\n\n    arguments\n\n    input: MeasurementQuery\n\n    type MeasurementQuery{\n        metricName: String!\n        after: Timestamp\n        before: Timestamp\n    }\n\n    =====\n    notes\n    =====\n\n    [Measurement] is what is being returned from the query\n\n    =========\n    end notes\n    =========\n\n    ======================\n    properly written query\n    ======================\n\n    const input = {\n        metricName: lastMeasurement.metric,\n        after: lastMeasurement.at - 1800000,\n        before: timeLimit.getTime() - 10000,\n    }\n\n    const [result] = useQuery({\n        query: MEASUREMENTS_QUERY,\n        variables: {\n            input,\n        },\n        pause: !lastMeasurement.metric,\n    })\n\n*/\n\n/*\n\n    breakdown of graphql schema of getMultipleMeasurement\n\n    getMultipleMeasurements(input:[MeasurementQuery]):[MultipleMeasurements]\n\n    type MultipleMeasurements {\n        metric: String!\n        measurements: [Measurement]\n    }\n\n    Arguments\n\n    input: [MeasurementQuery]\n\n    =====\n    notes\n    =====\n\n    measurements is an array of Measurements as defined in getMeasurements\n    the input is not just a MeasurementQuery but an array of MeasurementQuery\n    [MultipleMeasurements] is the return data\n\n    =========\n    end notes\n    =========\n\n    =======================\n    Properly written query?\n    =======================\n\n    \n    const MeasurementQuery = {\n        metricName\n        after\n        before\n    }\n\n    const input = [MeasurementQuery, MeasurementQuery]\n\n    const [result] = useQuery({\n        query: GET_MULTIPLE,\n        variables: {\n            input\n        }\n    })\n\n\n\n*/"]},"metadata":{},"sourceType":"module"}