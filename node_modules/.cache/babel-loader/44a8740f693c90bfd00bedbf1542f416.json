{"ast":null,"code":"var _jsxFileName = \"/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowData.tsx\";\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { createClient, Provider } from 'urql';\nimport Graph from './Graph';\nvar client = createClient({\n  url: 'https://react.eogresources.com/graphql'\n});\nvar LAST_KNOWN_MEASUREMENT_QUERY = \"\\n   query($metricName: String!){\\n       getLastKnownMeasurement(metricName: $metricName){\\n           metric\\n           at\\n           value\\n           unit\\n       }\\n   } \\n\";\n\nvar getMetric = function getMetric(state) {\n  var metrics = state.metric.metrics;\n  return {\n    metrics: metrics\n  };\n};\n\nvar ShowData = function ShowData() {\n  var dispatch = useDispatch(); // const { name } = useSelector(getMetric)\n  // const metricName = name\n\n  console.log(); // const [result] = useQuery({\n  //     query: LAST_KNOWN_MEASUREMENT_QUERY,\n  //     variables: {\n  //         metricName,\n  //     },\n  //     pause: !metricName,\n  //     pollInterval: 5000,\n  //     requestPolicy: 'cache-and-network',\n  // })\n  // const { data, error} = result\n  // useEffect(() => {\n  //     if(error){\n  //         dispatch(actions.metricApiErrorReceived({ error: error.message}))\n  //     }\n  //     if (!data) return\n  //     const { getLastKnownMeasurement } = data\n  //     dispatch(actions.lastMeasurement(getLastKnownMeasurement))\n  // }, [dispatch, data, error])\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Graph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n};\n\nexport default (function () {\n  return React.createElement(Provider, {\n    value: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(ShowData, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/home/kevin/Documents/kevin-bagnall-eog-react-assessment/src/Features/Graph/ShowData.tsx"],"names":["React","useDispatch","createClient","Provider","Graph","client","url","LAST_KNOWN_MEASUREMENT_QUERY","getMetric","state","metrics","metric","ShowData","dispatch","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAiC,OAAjC;AAGA,SAASC,WAAT,QAAyC,aAAzC;AACA,SAASC,YAAT,EAAiCC,QAAjC,QAAiD,MAAjD;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAGA,IAAMC,MAAM,GAAGH,YAAY,CAAC;AACxBI,EAAAA,GAAG,EAAE;AADmB,CAAD,CAA3B;AAIA,IAAMC,4BAA4B,wLAAlC;;AAWA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAmB;AAAA,MACzBC,OADyB,GACbD,KAAK,CAACE,MADO,CACzBD,OADyB;AAEjC,SAAO;AAAEA,IAAAA,OAAO,EAAPA;AAAF,GAAP;AACH,CAHD;;AAKA,IAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAEnB,MAAMC,QAAQ,GAAGZ,WAAW,EAA5B,CAFmB,CAGnB;AACA;;AACAa,EAAAA,OAAO,CAACC,GAAR,GALmB,CAMnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAjCD;;AAoCA,gBAAe,YAAM;AACjB,SACI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEV,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAND","sourcesContent":["import React, { useEffect } from 'react'\nimport { IState } from '../../store'\nimport { actions } from './reducer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { createClient, useQuery, Provider } from 'urql'\nimport Graph from './Graph'\n\n\nconst client = createClient({\n    url: 'https://react.eogresources.com/graphql',\n})\n\nconst LAST_KNOWN_MEASUREMENT_QUERY = `\n   query($metricName: String!){\n       getLastKnownMeasurement(metricName: $metricName){\n           metric\n           at\n           value\n           unit\n       }\n   } \n`\n\nconst getMetric = (state: IState) => {\n    const { metrics } = state.metric\n    return { metrics }\n}\n\nconst ShowData = () => {\n\n    const dispatch = useDispatch()\n    // const { name } = useSelector(getMetric)\n    // const metricName = name\n    console.log( )\n    // const [result] = useQuery({\n    //     query: LAST_KNOWN_MEASUREMENT_QUERY,\n    //     variables: {\n    //         metricName,\n    //     },\n    //     pause: !metricName,\n    //     pollInterval: 5000,\n    //     requestPolicy: 'cache-and-network',\n    // })\n\n    // const { data, error} = result\n    // useEffect(() => {\n    //     if(error){\n    //         dispatch(actions.metricApiErrorReceived({ error: error.message}))\n    //     }\n    //     if (!data) return\n    //     const { getLastKnownMeasurement } = data\n    //     dispatch(actions.lastMeasurement(getLastKnownMeasurement))\n    // }, [dispatch, data, error])\n\n \n\n    return(\n        <div>\n            <Graph />\n        </div>\n    )\n}\n\n\nexport default () => {\n    return(\n        <Provider value={client}>\n            <ShowData />\n        </Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}